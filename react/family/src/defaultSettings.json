{
	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles file blame annotations
	//  - heatmap: Toggles file heatmap annotations
	//  - changes: Toggles file changes annotations
	"gitlens.fileAnnotations.command": null,

	// Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
	// 
	"gitlens.insiders": null,

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",

	// Specifies whether to enable GitLens+ features
	"gitlens.plusFeatures.enabled": true,

	// Specifies the proxy configuration to use. If not specified, the proxy configuration will be determined based on VS Code or OS settings
	"gitlens.proxy": null,

	// Specifies whether to show the Welcome (Quick Setup) experience on first install
	"gitlens.showWelcomeOnInstall": true,

	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Specifies whether to enable virtual repositories support
	"gitlens.virtualRepositories.enabled": true,

	// Controls whether the editor shows CodeLens.
	"diffEditor.codeLens": false,

	// 
	//  - smart: Uses the default diffing algorithm.
	//  - experimental: Uses an experimental diffing algorithm.
	"diffEditor.diffAlgorithm": "smart",

	// When enabled, the diff editor ignores changes in leading or trailing whitespace.
	"diffEditor.ignoreTrimWhitespace": true,

	// Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
	"diffEditor.maxComputationTime": 5000,

	// Maximum file size in MB for which to compute diffs. Use 0 for no limit.
	"diffEditor.maxFileSize": 50,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// When enabled, the diff editor shows arrows in its glyph margin to revert changes.
	"diffEditor.renderMarginRevertIcon": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
	"diffEditor.wordWrap": "inherit",

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`; `) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
	"editor.accessibilityPageSize": 10,

	// Controls whether the editor should run in a mode where it is optimized for screen readers.
	//  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
	//  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
	//  - off: The editor will never be optimized for usage with a Screen Reader.
	"editor.accessibilitySupport": "auto",

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
	//  - always
	//  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Controls whether the editor should type over closing quotes or brackets.
	//  - always
	//  - auto: Type over closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
	//  - none: The editor will not insert indentation automatically.
	//  - keep: The editor will keep the current line's indentation.
	//  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
	//  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
	//  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
	"editor.autoIndent": "full",

	// Controls whether the editor should automatically surround selections when typing quotes or brackets.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - quotes: Surround with quotes but not brackets.
	//  - brackets: Surround with brackets but not quotes.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
	"editor.bracketPairColorization.enabled": true,

	// Controls whether each bracket type has its own independent color pool.
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,

	// Code Action kinds to be run on save.
	"editor.codeActionsOnSave": {},

	// Enable/disable showing group headers in the Code Action menu.
	"editor.codeActionWidget.showHeaders": true,

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls the font family for CodeLens.
	"editor.codeLensFontFamily": "",

	// Controls the font size in pixels for CodeLens. When set to 0, 90% of `editor.fontSize` is used.
	"editor.codeLensFontSize": 0,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Enable that the selection with the mouse and keys is doing column selection.
	"editor.columnSelection": false,

	// Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
	"editor.comments.ignoreEmptyLines": true,

	// Controls whether a space character is inserted when commenting.
	"editor.comments.insertSpace": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	"editor.cursorSmoothCaretAnimation": false,

	// Controls the cursor style.
	"editor.cursorStyle": "line",

	// Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
	"editor.cursorSurroundingLines": 0,

	// Controls when `cursorSurroundingLines` should be enforced.
	//  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
	//  - all: `cursorSurroundingLines` is enforced always.
	"editor.cursorSurroundingLinesStyle": "default",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.
	//  - null: All active folding range providers
	//  - njpwerner.autodocstring: Generates python docstrings automatically
	//  - svipas.code-autocomplete: Unofficial TabNine client (all-language autocomplete) for the VS Code.
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - flowtype.flow-for-vscode: Flow support for VS Code
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - ms-python.isort: Import Organization support for python files using `isort`.
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - kiteco.kite: AI code completions for all languages, intellisense, code snippets, code signatures, and cursor-following documentation for VS Code. Kite supports .js .jsx .vue .tsx .ts .css .html .less .c .cc .cpp .cs .h .hpp .m .scala .java .kt .py .go .php .rb and .sh filetypes.
	//  - ambar.live-code: Interactive code playground
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - ms-mssql.mssql: Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - searKing.preview-vscode: A Markdown, ReStructured Text, HTML, Jade, Pug, Image, CSS, Mermaid previewer.
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
	//  - mgesbert.python-path: Python imports utils.
	//  - dongli.python-preview: Provide Preview for Python Execution.
	//  - OfHumanBondage.react-proptypes-intellisense: PropTypes intellisense for React components
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
	//  - syler.sass-indented: Indented Sass syntax Highlighting, Autocomplete & Formatter
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - mtxr.sqltools: Connecting users to many of the most commonly used databases. Welcome to database management done right.
	//  - TabNine.tabnine-vscode: JavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - KevinRose.vsc-python-indent: Correct Python indentation
	//  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - HTMLHint.vscode-htmlhint: VS Code integration for HTMLHint - A Static Code Analysis Tool for HTML
	//  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
	//  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
	//  - joeandaverde.vscode-pegjs-live: Live preview PEG.js Grammars.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - ms-vscode.vscode-typescript-tslint-plugin: TSLint support for Visual Studio Code
	//  - pflannery.vscode-versionlens: Shows the latest version for each package using code lens
	//  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
	//  - googlecloudtools.cloudcode: Cloud Code is Google Cloud's official IDE extension to develop with your favorite Google Cloud services such as Kubernetes, Cloud Run, Compute Engine, Cloud APIs, Secret Manager, Container Registry, Artifact Registry, Cloud Build, Cloud Functions, and Apigee. Cloud Code makes developing with Google Cloud (GCP) feel like working on local code.
	//  - GitHub.codespaces: Your instant dev environment
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - ms-mssql.data-workspace-vscode: Additional common functionality for database projects
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - spook.easysass: Built-in, easy to use Sass compiler
	//  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
	//  - vscode.emmet: Emmet support for VS Code
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - redhat.fabric8-analytics: Insights about your application dependencies: Security, License compatibility and AI based guidance to choose appropriate dependencies for your application.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - ppgee.gitlab-mr-notice-vscode: MR tips in GitLab
	//  - payton-burdette.gitlab-pipeline-actions: Maintain your GitLab pipelines directly in VS Code.
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - hwencc.html-tag-wrapper: wrap selected html tag by press ctrl+i, you can change the wrapper tag name simply too
	//  - iceworks-team.iceworks-refactor: Easily refactor Component in React/Rax.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - nilobarp.javascript-test-runner: Run JavaScript tests easily using CodeLens
	//  - ldd-vs-code.jq-preview: A sample JQ for virtual document
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.js-debug-nightly: An extension for debugging Node.js programs and Chrome.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - jimcooper.live-auto-type: Auto type code the clipboard for live coding presentations.
	//  - Fraser.live-coder: See how your code executes as you write it.
	//  - hediet.live-debug-vscode: Connects to a NodeJS or Chrome debuggee and displays live data.
	//  - profimedica.live-preview: https://github.com/profimedica/LivePreview-VSCode-Extension
	//  - glenn2223.live-sass: Compile Sass or Scss to CSS at realtime.
	//  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
	//  - QualityClouds.livecheckqualityforsalesforce: Checks for adherence to coding best practices for Salesforce.
	//  - zhoumingjie.LiveHost: 1. Quickly edit system hosts file;； 2. Get best ip about github
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - leizongmin.node-module-intellisense: Autocompletes Node.js modules in import statements
	//  - naumovs.node-modules-resolve: Provides definitions for commonjs requires in your code for quick navigation.
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - techer.open-in-browser: This allows you to open the current file in your default browser or application.
	//  - mattn.OpenVim: Open a current file in Vim
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - xdebug.php-debug: Debug support for PHP with Xdebug
	//  - etmoffat.pip-packages: Install/update pip packages into virtual environments
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - tht13.python: Python language extension for vscode
	//  - himanoa.Python-autopep8: This is a vscode-extension that applies autopep8 to your current file.
	//  - 076923.python-image-preview: Numpy, Pillow, OpenCV, Matplotlib, Plotly, ImageIO, Scikit Image, Tensorflow, Pytorch Image Preview
	//  - CodeJunkie.python-live-coding: Enables live execution of python code
	//  - WallabyJs.quokka-vscode: JavaScript and TypeScript playground in your editor.
	//  - 1nVitr0.random-sample: Sample single or multiple lines from a file
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode.remote-explorer: View remote machines for Remote - SSH and Remote Server
	//  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
	//  - RolandGreim.sample-ext: UI-Samples and Code for Extension Developers.
	//  - jasonnutter.search-node-modules: Quickly search the node_modules folder.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
	//  - ms-mssql.sql-bindings-vscode: Enables users to develop and publish Azure Functions with Azure SQL bindings
	//  - ms-mssql.sql-database-projects-vscode: Enables users to develop and publish database schemas for MSSQL Databases
	//  - McCarter.start-git-bash: Adds a bash command to VSCode that allows you to start git-bash in the current workspace's root folder.
	//  - formulahendry.terminal: Terminal for Visual Studio Code
	//  - ms-vscode.test-adapter-converter: Converter extension from the Test Adapter UI to native VS Code testing
	//  - rvest.vs-code-prettier-eslint: A Visual Studio Extension to format JavaScript and Typescript code using prettier-eslint package
	//  - wix.vscode-import-cost: Display import/require package size in the editor
	//  - Orta.vscode-jest: Use Facebook's Jest With Pleasure.
	//  - whtouche.vscode-js-console-utils: Help insert and remove console.(*) statements
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - ms-kubernetes-tools.vscode-kubernetes-tools: Develop, deploy and debug Kubernetes applications
	//  - jevakallio.vscode-live-frame: Live preview your web application inside VS Code
	//  - Compulim.vscode-mocha: Runs Mocha tests
	//  - maty.vscode-mocha-sidebar: Mocha side bar is the most complete extension for mocha testing, based on not maintained mocha extension , have fun :)
	//  - eg2.vscode-npm-script: npm support for VS Code
	//  - cweijan.vscode-office: View word,excel files and using WYSIWYG editor for markdown.
	//  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
	//  - littlefoxteam.vscode-python-test-adapter: Run your Python tests in the Sidebar of Visual Studio Code
	//  - msjsdiag.vscode-react-native: Debugging and integrated commands for React Native
	//  - planbcoding.vscode-react-refactor: Recompose your overgrown JSX without worrying about the given data.
	//  - Liveecommerce.vscode-remote-workspace: Multi protocol support (like Azure, Dropbox, S3, (S)FTP or Slack) for handling remote files like local ones.
	//  - standard.vscode-standard: Visual Studio Code extension for JavaScript Standard Style with automatic fixing.
	//  - chenxsan.vscode-standardjs: Integrates JavaScript Standard Style into VS Code.
	//  - ranadeep.vscode-stocks-live: Watch live stock prices from the VS Code status bar
	//  - hbenl.vscode-test-explorer: Run your tests in the Sidebar of Visual Studio Code
	//  - hbenl.vscode-test-explorer-liveshare: Use the Test Explorer in your Visual Studio Live Share sessions
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	//  - ms-vsliveshare.vsliveshare-audio: Adds audio calling capabilities to Visual Studio Live Share
	//  - lostintangent.vsls-whiteboard: Adds a real-time collaborative whiteboard to Visual Studio Live Share sessions
	"editor.defaultFoldingRangeProvider": null,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - njpwerner.autodocstring: Generates python docstrings automatically
	//  - svipas.code-autocomplete: Unofficial TabNine client (all-language autocomplete) for the VS Code.
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - flowtype.flow-for-vscode: Flow support for VS Code
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - ms-python.isort: Import Organization support for python files using `isort`.
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - kiteco.kite: AI code completions for all languages, intellisense, code snippets, code signatures, and cursor-following documentation for VS Code. Kite supports .js .jsx .vue .tsx .ts .css .html .less .c .cc .cpp .cs .h .hpp .m .scala .java .kt .py .go .php .rb and .sh filetypes.
	//  - ambar.live-code: Interactive code playground
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - ms-mssql.mssql: Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - searKing.preview-vscode: A Markdown, ReStructured Text, HTML, Jade, Pug, Image, CSS, Mermaid previewer.
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
	//  - mgesbert.python-path: Python imports utils.
	//  - dongli.python-preview: Provide Preview for Python Execution.
	//  - OfHumanBondage.react-proptypes-intellisense: PropTypes intellisense for React components
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
	//  - syler.sass-indented: Indented Sass syntax Highlighting, Autocomplete & Formatter
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - mtxr.sqltools: Connecting users to many of the most commonly used databases. Welcome to database management done right.
	//  - TabNine.tabnine-vscode: JavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - rvest.vs-code-prettier-eslint: A Visual Studio Extension to format JavaScript and Typescript code using prettier-eslint package
	//  - KevinRose.vsc-python-indent: Correct Python indentation
	//  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - HTMLHint.vscode-htmlhint: VS Code integration for HTMLHint - A Static Code Analysis Tool for HTML
	//  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
	//  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
	//  - joeandaverde.vscode-pegjs-live: Live preview PEG.js Grammars.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - standard.vscode-standard: Visual Studio Code extension for JavaScript Standard Style with automatic fixing.
	//  - chenxsan.vscode-standardjs: Integrates JavaScript Standard Style into VS Code.
	//  - ms-vscode.vscode-typescript-tslint-plugin: TSLint support for Visual Studio Code
	//  - pflannery.vscode-versionlens: Shows the latest version for each package using code lens
	//  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
	//  - googlecloudtools.cloudcode: Cloud Code is Google Cloud's official IDE extension to develop with your favorite Google Cloud services such as Kubernetes, Cloud Run, Compute Engine, Cloud APIs, Secret Manager, Container Registry, Artifact Registry, Cloud Build, Cloud Functions, and Apigee. Cloud Code makes developing with Google Cloud (GCP) feel like working on local code.
	//  - GitHub.codespaces: Your instant dev environment
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - ms-mssql.data-workspace-vscode: Additional common functionality for database projects
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - spook.easysass: Built-in, easy to use Sass compiler
	//  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
	//  - vscode.emmet: Emmet support for VS Code
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - redhat.fabric8-analytics: Insights about your application dependencies: Security, License compatibility and AI based guidance to choose appropriate dependencies for your application.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - ppgee.gitlab-mr-notice-vscode: MR tips in GitLab
	//  - payton-burdette.gitlab-pipeline-actions: Maintain your GitLab pipelines directly in VS Code.
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - hwencc.html-tag-wrapper: wrap selected html tag by press ctrl+i, you can change the wrapper tag name simply too
	//  - iceworks-team.iceworks-refactor: Easily refactor Component in React/Rax.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - nilobarp.javascript-test-runner: Run JavaScript tests easily using CodeLens
	//  - ldd-vs-code.jq-preview: A sample JQ for virtual document
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.js-debug-nightly: An extension for debugging Node.js programs and Chrome.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - jimcooper.live-auto-type: Auto type code the clipboard for live coding presentations.
	//  - Fraser.live-coder: See how your code executes as you write it.
	//  - hediet.live-debug-vscode: Connects to a NodeJS or Chrome debuggee and displays live data.
	//  - profimedica.live-preview: https://github.com/profimedica/LivePreview-VSCode-Extension
	//  - glenn2223.live-sass: Compile Sass or Scss to CSS at realtime.
	//  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
	//  - QualityClouds.livecheckqualityforsalesforce: Checks for adherence to coding best practices for Salesforce.
	//  - zhoumingjie.LiveHost: 1. Quickly edit system hosts file;； 2. Get best ip about github
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - leizongmin.node-module-intellisense: Autocompletes Node.js modules in import statements
	//  - naumovs.node-modules-resolve: Provides definitions for commonjs requires in your code for quick navigation.
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - techer.open-in-browser: This allows you to open the current file in your default browser or application.
	//  - mattn.OpenVim: Open a current file in Vim
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - xdebug.php-debug: Debug support for PHP with Xdebug
	//  - etmoffat.pip-packages: Install/update pip packages into virtual environments
	//  - tht13.python: Python language extension for vscode
	//  - himanoa.Python-autopep8: This is a vscode-extension that applies autopep8 to your current file.
	//  - 076923.python-image-preview: Numpy, Pillow, OpenCV, Matplotlib, Plotly, ImageIO, Scikit Image, Tensorflow, Pytorch Image Preview
	//  - CodeJunkie.python-live-coding: Enables live execution of python code
	//  - WallabyJs.quokka-vscode: JavaScript and TypeScript playground in your editor.
	//  - 1nVitr0.random-sample: Sample single or multiple lines from a file
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode.remote-explorer: View remote machines for Remote - SSH and Remote Server
	//  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
	//  - RolandGreim.sample-ext: UI-Samples and Code for Extension Developers.
	//  - jasonnutter.search-node-modules: Quickly search the node_modules folder.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
	//  - ms-mssql.sql-bindings-vscode: Enables users to develop and publish Azure Functions with Azure SQL bindings
	//  - ms-mssql.sql-database-projects-vscode: Enables users to develop and publish database schemas for MSSQL Databases
	//  - McCarter.start-git-bash: Adds a bash command to VSCode that allows you to start git-bash in the current workspace's root folder.
	//  - formulahendry.terminal: Terminal for Visual Studio Code
	//  - ms-vscode.test-adapter-converter: Converter extension from the Test Adapter UI to native VS Code testing
	//  - wix.vscode-import-cost: Display import/require package size in the editor
	//  - Orta.vscode-jest: Use Facebook's Jest With Pleasure.
	//  - whtouche.vscode-js-console-utils: Help insert and remove console.(*) statements
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - ms-kubernetes-tools.vscode-kubernetes-tools: Develop, deploy and debug Kubernetes applications
	//  - jevakallio.vscode-live-frame: Live preview your web application inside VS Code
	//  - Compulim.vscode-mocha: Runs Mocha tests
	//  - maty.vscode-mocha-sidebar: Mocha side bar is the most complete extension for mocha testing, based on not maintained mocha extension , have fun :)
	//  - eg2.vscode-npm-script: npm support for VS Code
	//  - cweijan.vscode-office: View word,excel files and using WYSIWYG editor for markdown.
	//  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
	//  - littlefoxteam.vscode-python-test-adapter: Run your Python tests in the Sidebar of Visual Studio Code
	//  - msjsdiag.vscode-react-native: Debugging and integrated commands for React Native
	//  - planbcoding.vscode-react-refactor: Recompose your overgrown JSX without worrying about the given data.
	//  - Liveecommerce.vscode-remote-workspace: Multi protocol support (like Azure, Dropbox, S3, (S)FTP or Slack) for handling remote files like local ones.
	//  - ranadeep.vscode-stocks-live: Watch live stock prices from the VS Code status bar
	//  - hbenl.vscode-test-explorer: Run your tests in the Sidebar of Visual Studio Code
	//  - hbenl.vscode-test-explorer-liveshare: Use the Test Explorer in your Visual Studio Live Share sessions
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	//  - ms-vsliveshare.vsliveshare-audio: Adds audio calling capabilities to Visual Studio Live Share
	//  - lostintangent.vsls-whiteboard: Adds a real-time collaborative whiteboard to Visual Studio Live Share sessions
	"editor.defaultFormatter": null,

	// Controls whether the Go to Definition mouse gesture always opens the peek widget.
	"editor.definitionLinkOpensInPeek": false,

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).
	"editor.dropIntoEditor.enabled": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Enable/disable running edits from extensions on paste.
	"editor.experimental.pasteActions.enabled": false,

	// Scrolling speed multiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls the condition for turning on Find in Selection automatically.
	//  - never: Never turn on Find in Selection automatically (default).
	//  - always: Always turn on Find in Selection automatically.
	//  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
	"editor.find.autoFindInSelection": "never",

	// Controls whether the cursor should jump to find matches while typing.
	"editor.find.cursorMoveOnType": true,

	// Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
	"editor.find.globalFindClipboard": false,

	// Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
	"editor.find.loop": true,

	// Controls whether the search string in the Find Widget is seeded from the editor selection.
	//  - never: Never seed search string from the editor selection.
	//  - always: Always seed search string from the editor selection, including word at cursor position.
	//  - selection: Only seed search string from the editor selection.
	"editor.find.seedSearchStringFromSelection": "always",

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls whether the editor should highlight folded ranges.
	"editor.foldingHighlight": true,

	// Controls whether the editor automatically collapses import ranges.
	"editor.foldingImportsByDefault": false,

	// The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
	"editor.foldingMaximumRegions": 5000,

	// Controls the strategy for computing folding ranges.
	//  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
	//  - indentation: Use the indentation-based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

	// Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
	"editor.fontLigatures": false,

	// Controls the font size in pixels.
	"editor.fontSize": 12,

	// Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.
	"editor.fontVariations": false,

	// Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": false,

	// Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
	"editor.formatOnSave": false,

	// Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
	//  - file: Format the whole file.
	//  - modifications: Format modifications (requires source control).
	//  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
	"editor.formatOnSaveMode": "file",

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": false,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
	// 
	"editor.gotoLocation.multiple": null,

	// Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleImplementations": "peek",

	// Controls the behavior the 'Go to References'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleReferences": "peek",

	// Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether bracket pair guides are enabled or not.
	//  - true: Enables bracket pair guides.
	//  - active: Enables bracket pair guides only for the active bracket pair.
	//  - false: Disables bracket pair guides.
	"editor.guides.bracketPairs": false,

	// Controls whether horizontal bracket pair guides are enabled or not.
	//  - true: Enables horizontal guides as addition to vertical bracket pair guides.
	//  - active: Enables horizontal guides only for the active bracket pair.
	//  - false: Disables horizontal bracket pair guides.
	"editor.guides.bracketPairsHorizontal": "active",

	// Controls whether the editor should highlight the active bracket pair.
	"editor.guides.highlightActiveBracketPair": true,

	// Controls whether the editor should highlight the active indent guide.
	//  - true: Highlights the active indent guide.
	//  - always: Highlights the active indent guide even if bracket guides are highlighted.
	//  - false: Do not highlight the active indent guide.
	"editor.guides.highlightActiveIndentation": true,

	// Controls whether the editor should render indent guides.
	"editor.guides.indentation": true,

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Prefer showing hovers above the line, if there's space.
	"editor.hover.above": true,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 300,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// The number of spaces used for indentation or `"tabSize"` to use the value from `editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation` is on.
	"editor.indentSize": "tabSize",

	// Enables the inlay hints in the editor.
	//  - on: Inlay hints are enabled
	//  - onUnlessPressed: Inlay hints are showing by default and hide when holding Ctrl+Option
	//  - offUnlessPressed: Inlay hints are hidden by default and show when holding Ctrl+Option
	//  - off: Inlay hints are disabled
	"editor.inlayHints.enabled": "on",

	// Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
	"editor.inlayHints.fontFamily": "",

	// Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
	"editor.inlayHints.fontSize": 0,

	// Enables the padding around the inlay hints in the editor.
	"editor.inlayHints.padding": false,

	// Controls whether to automatically show inline suggestions in the editor.
	"editor.inlineSuggest.enabled": true,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Defines the bracket symbols that increase or decrease the indentation.
	"editor.language.brackets": null,

	// Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
	"editor.language.colorizedBracketPairs": null,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the Code Action lightbulb in the editor.
	"editor.lightbulb.enabled": true,

	// Controls the line height. 
	//  - Use 0 to automatically compute the line height from the font size.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.
	"editor.linkedEditing": false,

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets.
	"editor.matchBrackets": "always",

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 20000,

	// Controls whether the minimap is hidden automatically.
	"editor.minimap.autohide": false,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 120,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Scale of content drawn in the minimap: 1, 2 or 3.
	"editor.minimap.scale": 1,

	// Controls when the minimap slider is shown.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// Controls the size of the minimap.
	//  - proportional: The minimap has the same size as the editor contents (and might scroll).
	//  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
	//  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
	"editor.minimap.size": "proportional",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Controls the max number of cursors that can be in an active editor at once.
	"editor.multiCursorLimit": 10000,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls pasting when the line count of the pasted text matches the cursor count.
	//  - spread: Each cursor pastes a single line of the text.
	//  - full: Each cursor pastes the full text.
	"editor.multiCursorPaste": "spread",

	// Controls whether the editor should highlight semantic symbol occurrences.
	"editor.occurrencesHighlight": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the amount of space between the bottom edge of the editor and the last line.
	"editor.padding.bottom": 0,

	// Controls the amount of space between the top edge of the editor and the first line.
	"editor.padding.top": 0,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": false,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether to focus the inline editor or the tree in the peek widget.
	//  - tree: Focus the tree when opening peek
	//  - editor: Focus the editor when opening peek
	"editor.peekWidgetDefaultFocus": "tree",

	// Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '#editor.suggestOnTriggerCharacters#'-setting which controls if suggestions are triggered by special characters.
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 10,

	// Enable/disable the ability to preview changes before renaming
	"editor.rename.enablePreview": true,

	// Deprecated, use `editor.linkedEditing` instead.
	// Controls whether the editor auto renames on type.
	"editor.renameOnType": false,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": true,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": true,

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls if the editor should render the current line highlight only when the editor is focused.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - selection: Render whitespace characters only on selected text.
	//  - trailing: Render only trailing whitespace characters.
	//  - all
	"editor.renderWhitespace": "selection",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Controls the visibility of the horizontal scrollbar.
	//  - auto: The horizontal scrollbar will be visible only when necessary.
	//  - visible: The horizontal scrollbar will always be visible.
	//  - hidden: The horizontal scrollbar will always be hidden.
	"editor.scrollbar.horizontal": "auto",

	// The height of the horizontal scrollbar.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// Controls whether clicks scroll by page or jump to click position.
	"editor.scrollbar.scrollByPage": false,

	// Controls the visibility of the vertical scrollbar.
	//  - auto: The vertical scrollbar will be visible only when necessary.
	//  - visible: The vertical scrollbar will always be visible.
	//  - hidden: The vertical scrollbar will always be hidden.
	"editor.scrollbar.vertical": "auto",

	// The width of the vertical scrollbar.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 4,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
	"editor.scrollPredominantAxis": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the semanticHighlighting is shown for the languages that support it.
	//  - true: Semantic highlighting enabled for all color themes.
	//  - false: Semantic highlighting disabled for all color themes.
	//  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Overrides editor semantic token color and styles from the currently selected color theme.
	"editor.semanticTokenColorCustomizations": {},

	// Controls strikethrough deprecated variables.
	"editor.showDeprecated": true,

	// Controls when the folding controls on the gutter are shown.
	//  - always: Always show the folding controls.
	//  - never: Never show the folding controls and reduce the gutter size.
	//  - mouseover: Only show the folding controls when the mouse is over the gutter.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Whether leading and trailing whitespace should always be selected.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls if surround-with-snippets or file template snippets show as Code Actions.
	"editor.snippets.codeActions.enabled": true,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Shows the nested current scopes during the scroll at the top of the editor.
	"editor.stickyScroll.enabled": false,

	// Defines the maximum number of sticky lines to show.
	"editor.stickyScroll.maxLineCount": 5,

	// Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
	"editor.stickyTabStops": false,

	// This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
	// 
	"editor.suggest.filteredTypes": {},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
	//  - insert: Insert suggestion without overwriting text right of the cursor.
	//  - replace: Insert suggestion and overwrite text right of the cursor.
	"editor.suggest.insertMode": "insert",

	// Controls whether sorting favors words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.
	"editor.suggest.matchOnWordStartOnly": true,

	// This setting is deprecated. The suggest widget can now be resized.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Controls whether to preview the suggestion outcome in the editor.
	"editor.suggest.preview": false,

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// When enabled IntelliSense shows `class`-suggestions.
	"editor.suggest.showClasses": true,

	// When enabled IntelliSense shows `color`-suggestions.
	"editor.suggest.showColors": true,

	// When enabled IntelliSense shows `constant`-suggestions.
	"editor.suggest.showConstants": true,

	// When enabled IntelliSense shows `constructor`-suggestions.
	"editor.suggest.showConstructors": true,

	// When enabled IntelliSense shows `customcolor`-suggestions.
	"editor.suggest.showCustomcolors": true,

	// When enabled IntelliSense shows `deprecated`-suggestions.
	"editor.suggest.showDeprecated": true,

	// When enabled IntelliSense shows `enumMember`-suggestions.
	"editor.suggest.showEnumMembers": true,

	// When enabled IntelliSense shows `enum`-suggestions.
	"editor.suggest.showEnums": true,

	// When enabled IntelliSense shows `event`-suggestions.
	"editor.suggest.showEvents": true,

	// When enabled IntelliSense shows `field`-suggestions.
	"editor.suggest.showFields": true,

	// When enabled IntelliSense shows `file`-suggestions.
	"editor.suggest.showFiles": true,

	// When enabled IntelliSense shows `folder`-suggestions.
	"editor.suggest.showFolders": true,

	// When enabled IntelliSense shows `function`-suggestions.
	"editor.suggest.showFunctions": true,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Controls whether suggest details show inline with the label or only in the details widget.
	"editor.suggest.showInlineDetails": true,

	// When enabled IntelliSense shows `interface`-suggestions.
	"editor.suggest.showInterfaces": true,

	// When enabled IntelliSense shows `issues`-suggestions.
	"editor.suggest.showIssues": true,

	// When enabled IntelliSense shows `keyword`-suggestions.
	"editor.suggest.showKeywords": true,

	// When enabled IntelliSense shows `method`-suggestions.
	"editor.suggest.showMethods": true,

	// When enabled IntelliSense shows `module`-suggestions.
	"editor.suggest.showModules": true,

	// When enabled IntelliSense shows `operator`-suggestions.
	"editor.suggest.showOperators": true,

	// When enabled IntelliSense shows `property`-suggestions.
	"editor.suggest.showProperties": true,

	// When enabled IntelliSense shows `reference`-suggestions.
	"editor.suggest.showReferences": true,

	// When enabled IntelliSense shows `snippet`-suggestions.
	"editor.suggest.showSnippets": true,

	// Controls the visibility of the status bar at the bottom of the suggest widget.
	"editor.suggest.showStatusBar": false,

	// When enabled IntelliSense shows `struct`-suggestions.
	"editor.suggest.showStructs": true,

	// When enabled IntelliSense shows `typeParameter`-suggestions.
	"editor.suggest.showTypeParameters": true,

	// When enabled IntelliSense shows `unit`-suggestions.
	"editor.suggest.showUnits": true,

	// When enabled IntelliSense shows `user`-suggestions.
	"editor.suggest.showUsers": true,

	// When enabled IntelliSense shows `value`-suggestions.
	"editor.suggest.showValues": true,

	// When enabled IntelliSense shows `variable`-suggestions.
	"editor.suggest.showVariables": true,

	// When enabled IntelliSense shows `text`-suggestions.
	"editor.suggest.showWords": true,

	// Controls whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 0,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "first",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "off",

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor syntax colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": {},

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Controls whether clicking on the empty content after a folded line will unfold the line.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Defines allowed characters that are not being highlighted.
	"editor.unicodeHighlight.allowedCharacters": {},

	// Unicode characters that are common in allowed locales are not being highlighted.
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// Controls whether characters in comments should also be subject to Unicode highlighting.
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// Controls whether characters in strings should also be subject to Unicode highlighting.
	"editor.unicodeHighlight.includeStrings": true,

	// Controls whether characters that just reserve space or have no width at all are highlighted.
	"editor.unicodeHighlight.invisibleCharacters": true,

	// Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// Remove unusual line terminators that might cause problems.
	//  - auto: Unusual line terminators are automatically removed.
	//  - off: Unusual line terminators are ignored.
	//  - prompt: Unusual line terminators prompt to be removed.
	"editor.unusualLineTerminators": "prompt",

	// Inserting and deleting whitespace follows tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document.
	"editor.wordBasedSuggestions": true,

	// Controls from which documents word based completions are computed.
	//  - currentDocument: Only suggest words from the active document.
	//  - matchingDocuments: Suggest words from all open documents of the same language.
	//  - allDocuments: Suggest words from all open documents.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.
	//  - normal: Use the default line break rule.
	//  - keepAll: Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.
	"editor.wordBreak": "normal",

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 80,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

	// Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
	//  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
	//  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
	"editor.wrappingStrategy": "simple",

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": false,

	// Controls whether repositories should always be visible in the Source Control view.
	"scm.alwaysShowRepositories": false,

	// Controls whether the Source Control view should automatically reveal and select files when opening them.
	"scm.autoReveal": true,

	// Controls the count badge on the Source Control icon on the Activity Bar.
	//  - all: Show the sum of all Source Control Provider count badges.
	//  - focused: Show the count badge of the focused Source Control Provider.
	//  - off: Disable the Source Control count badge.
	"scm.countBadge": "all",

	// Controls the default Source Control repository view mode.
	//  - tree: Show the repository changes as a tree.
	//  - list: Show the repository changes as a list.
	"scm.defaultViewMode": "list",

	// Controls the default Source Control repository changes sort order when viewed as a list.
	//  - name: Sort the repository changes by file name.
	//  - path: Sort the repository changes by path.
	//  - status: Sort the repository changes by Source Control status.
	"scm.defaultViewSortKey": "path",

	// Controls diff decorations in the editor.
	//  - all: Show the diff decorations in all available locations.
	//  - gutter: Show the diff decorations only in the editor gutter.
	//  - overview: Show the diff decorations only in the overview ruler.
	//  - minimap: Show the diff decorations only in the minimap.
	//  - none: Do not show the diff decorations.
	"scm.diffDecorations": "all",

	// Controls the behavior of Source Control diff gutter decorations.
	//  - diff: Show the inline diff Peek view on click.
	//  - none: Do nothing.
	"scm.diffDecorationsGutterAction": "diff",

	// Controls whether a pattern is used for the diff decorations in gutter.
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},

	// Controls the visibility of the Source Control diff decorator in the gutter.
	//  - always: Show the diff decorator in the gutter at all times.
	//  - hover: Show the diff decorator in the gutter only on hover.
	"scm.diffDecorationsGutterVisibility": "always",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
	//  - true: Ignore leading and trailing whitespace.
	//  - false: Do not ignore leading and trailing whitespace.
	//  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
	"scm.inputFontFamily": "default",

	// Controls the font size for the input message in pixels.
	"scm.inputFontSize": 13,

	// Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
	//  - hidden: Hide Source Control Provider count badges.
	//  - auto: Only show count badge for Source Control Provider when non-zero.
	//  - visible: Show Source Control Provider count badges.
	"scm.providerCountBadge": "hidden",

	// Controls the sort order of the repositories in the source control repositories view.
	//  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
	//  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
	//  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
	"scm.repositories.sortOrder": "discovery time",

	// Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.
	"scm.repositories.visible": 10,

	// Controls whether an action button can be shown in the Source Control view.
	"scm.showActionButton": true,

	// Controls when the restricted mode banner is shown.
	//  - always: Show the banner every time an untrusted workspace is open.
	//  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
	//  - never: Do not show the banner when an untrusted workspace is open.
	"security.workspace.trust.banner": "untilDismissed",

	// Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
	"security.workspace.trust.emptyWindow": true,

	// Controls whether or not Workspace Trust is enabled within VS Code.
	"security.workspace.trust.enabled": true,

	// Controls when the startup prompt to trust a workspace is shown.
	//  - always: Ask for trust every time an untrusted workspace is opened.
	//  - once: Ask for trust the first time an untrusted workspace is opened.
	//  - never: Do not ask for trust when an untrusted workspace is opened.
	"security.workspace.trust.startupPrompt": "once",

	// Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
	//  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
	//  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
	//  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Controls the behavior of clicking an activity bar icon in the workbench.
	//  - toggle: Hide the side bar if the clicked item is already visible.
	//  - focus: Focus side bar if the clicked item is already visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Controls the visibility of the activity bar in the workbench.
	"workbench.activityBar.visible": true,

	// Controls whether to automatically resume available working changes stored in the cloud for the current workspace.
	//  - onReload: Automatically resume available working changes from the cloud on window reload.
	//  - off: Never attempt to resume working changes from the cloud.
	"workbench.cloudChanges.autoResume": "onReload",

	// Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.
	//  - prompt: Prompt the user to sign in to store working changes in the cloud with Continue Working On.
	//  - off: Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.
	"workbench.cloudChanges.continueOn": "prompt",

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench.
	"workbench.colorTheme": "Default Dark+",

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 50,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": false,

	// If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.editorinputs.searchEditorInput": false,
		"terminalEditor": true,
		"jupyter-notebook": false,
		"cweijan.markdownViewer": false,
		"vscode.preview.preview.editor": false,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"cweijan.officeViewer": false,
		"cweijan.htmlViewer": false,
		"cweijan.classViewer": false,
		"gitlens.rebase": false,
		"workbench.input.interactive": false,
		"mainThreadWebview-markdown.preview": false
	},

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether editor file decorations should use badges.
	"workbench.editor.decorations.badges": true,

	// Controls whether editor file decorations should use colors.
	"workbench.editor.decorations.colors": true,

	// The default editor for files detected as binary. If undefined, the user will be presented with a picker.
	"workbench.editor.defaultBinaryEditor": "",

	// Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (via double click or editing), and show file names in italics.
	"workbench.editor.enablePreview": true,

	// Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Controls whether tabs are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.highlightModifiedTabs": false,

	// Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
	"workbench.editor.historyBasedLanguageDetection": true,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
	"workbench.editor.languageDetection": true,

	// When enabled, shows a Status bar Quick Fix when the editor language doesn't match detected content language.
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},

	// Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
	"workbench.editor.limit.enabled": false,

	// Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
	"workbench.editor.limit.excludeDirty": false,

	// Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
	"workbench.editor.limit.perEditorGroup": false,

	// Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
	"workbench.editor.limit.value": 10,

	// Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
	//  - default: Navigate across all opened editors and editor groups.
	//  - editorGroup: Navigate only in editors of the active editor group.
	//  - editor: Navigate only in the active editor.
	"workbench.editor.navigationScope": "default",

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - normal: A pinned tab inherits the look of non pinned tabs.
	//  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
	//  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
	"workbench.editor.pinnedTabSizing": "normal",

	// When enabled, a language detection model that takes into account editor history will be given higher precedence.
	"workbench.editor.preferHistoryBasedLanguageDetection": true,

	// Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.scrollToSwitchTabs": false,

	// Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
	"workbench.editor.sharedViewState": false,

	// Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show in tabs or not.
	"workbench.editor.showTabs": true,

	// Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
	//  - vertical: Editors are positioned from top to bottom.
	//  - horizontal: Editors are positioned from left to right.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
	"workbench.editor.splitOnDragAndDrop": true,

	// Controls the sizing of editor groups when splitting them.
	//  - distribute: Splits all the editor groups to equal parts.
	//  - split: Splits the active editor group to equal parts.
	"workbench.editor.splitSizing": "distribute",

	// Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.tabCloseButton": "right",

	// Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
	//  - default: The default size.
	//  - large: Increases the size, so it can be grabbed more easily with the mouse.
	"workbench.editor.titleScrollbarSizing": "default",

	// Controls if the untitled text hint should be visible in the editor.
	"workbench.editor.untitled.hint": "text",

	// Controls the format of the label for an untitled editor.
	//  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
	//  - name: The name of the untitled file is not derived from the contents of the file.
	"workbench.editor.untitled.labelFormat": "content",

	// Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.wrapTabs": false,

	// Configure glob patterns to editors (for example `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
	"workbench.editorAssociations": {},

	// This setting is deprecated in favor of `workbench.cloudChanges.autoResume`.
	// 
	"workbench.editSessions.autoResume": null,

	// This setting is deprecated in favor of `workbench.cloudChanges.continueOn`.
	// 
	"workbench.editSessions.continueOn": null,

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

	// Controls whether to automatically store available working changes in the cloud for the current workspace.
	//  - onShutdown: Automatically store current working changes in the cloud on window close.
	//  - off: Never attempt to automatically store working changes in the cloud.
	"workbench.experimental.cloudChanges.autoStore": "off",

	// Controls whether to surface cloud changes which partially match the current session.
	"workbench.experimental.cloudChanges.partialMatches.enabled": false,

	// This setting is deprecated in favor of `workbench.experimental.cloudChanges.autoStore`.
	// 
	"workbench.experimental.editSessions.autoStore": null,

	// This setting is deprecated in favor of `workbench.experimental.cloudChanges.partialMatches.enabled`.
	// 
	"workbench.experimental.editSessions.partialMatches.enabled": null,

	// Controls whether to enable the Profiles preview feature.
	"workbench.experimental.settingsProfiles.enabled": false,

	// Configure the opener to use for external URIs (http, https).
	"workbench.externalUriOpeners": {},

	// Controls font aliasing method in the workbench.
	//  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
	//  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
	//  - none: Disables font smoothing. Text will show with jagged sharp edges.
	//  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
	"workbench.fontAliasing": "default",

	// Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
	"workbench.hover.delay": 1500,

	// Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	//  - vs-nomo-dark
	//  - office-material-icon-theme
	"workbench.iconTheme": "vs-seti",

	// Controls whether the layout control is shown in the custom title bar. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"workbench.layoutControl.enabled": true,

	// Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
	//  - menu: Shows a single button with a dropdown of layout options.
	//  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
	//  - both: Shows both the dropdown and toggle buttons.
	"workbench.layoutControl.type": "both",

	// Controls the default find mode for lists and trees in the workbench.
	//  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter elements when searching.
	"workbench.list.defaultFindMode": "highlight",

	// Scrolling speed multiplier when pressing `Alt`.
	"workbench.list.fastScrollSensitivity": 5,

	// Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
	"workbench.list.horizontalScrolling": false,

	// Please use 'workbench.list.defaultFindMode' instead.
	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.list.openMode": "singleClick",

	// Controls whether lists and trees have smooth scrolling.
	"workbench.list.smoothScrolling": false,

	// Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.enabled": true,

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files from the local file history. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.exclude": {},

	// Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
	"workbench.localHistory.maxFileEntries": 50,

	// Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.maxFileSize": 256,

	// Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.mergeWindow": 10,

	// Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
	//  - always: Always maximize the panel when opening it.
	//  - never: Never maximize the panel when opening it. The panel will open un-maximized.
	//  - preserve: Open the panel to the state that it was in, before it was closed.
	"workbench.panel.opensMaximized": "preserve",

	// Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Specifies the preferred color theme used in high contrast dark mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Specifies the preferred color theme used in high contrast light mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

	// Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Specifies the product icon theme used.
	//  - Default: Default
	"workbench.productIconTheme": "Default",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": false,

	// Controls whether the workbench should render with fewer animations.
	//  - on: Always render with reduced motion.
	//  - off: Do not render with reduced motion
	//  - auto: Render with reduced motion based on OS configuration.
	"workbench.reduceMotion": "auto",

	// Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
	"workbench.sash.hoverDelay": 300,

	// Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
	"workbench.sash.size": 4,

	// Determines which settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "ui",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": false,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": false,

	// Controls the behavior of the settings editor Table of Contents while searching.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
	//  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.tree.expandMode": "singleClick",

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

	// When enabled, the get started page has additional links to video tutorials.
	"workbench.welcomePage.experimental.videoTutorials": "off",

	// Deprecated, use the global `workbench.reduceMotion`.
	// When enabled, reduce motion in welcome page.
	"workbench.welcomePage.preferReducedMotion": false,

	// When enabled, an extension's walkthrough will open upon install of the extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `workbench.preferredDarkColorTheme#` is used, for light `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`.
	"window.autoDetectHighContrast": true,

	// If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
	"window.clickThroughInactive": true,

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Show command launcher together with the window title. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.commandCenter": false,

	// Controls whether to show a confirmation dialog before closing the window or quitting the application.
	//  - always: Always ask for confirmation.
	//  - keyboardOnly: Only ask for confirmation if a keybinding was used.
	//  - never: Never explicitly ask for confirmation.
	"window.confirmBeforeClose": "never",

	// Adjust the appearance of dialog windows.
	"window.dialogStyle": "native",

	// If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Experimental: When enabled, the window will have sandbox mode enabled via Electron API.
	"window.experimental.useSandbox": false,

	// Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
	"window.nativeFullScreen": true,

	// Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
	"window.nativeTabs": false,

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - offset: Open new windows with same dimension as last active one with an offset position.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Controls whether files should open in a new window when using a command line or file dialog.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "off",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.
	//  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.
	//  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).
	//  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).
	//  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).
	//  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
	"window.restoreWindows": "all",

	// Controls the window title based on the active editor. Variables are substituted based on the context:
	// - `${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
	// - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
	// - `${appName}`: e.g. VS Code.
	// - `${remoteName}`: e.g. SSH
	// - `${dirty}`: an indicator for when the active editor has unsaved changes.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${activeEditorShort}${separator}${rootName}",

	// Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Separator used by `window.title`.
	"window.titleSeparator": " — ",

	// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
	"window.zoomLevel": 0,

	// Configure file associations to languages (for example `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
	"files.associations": {},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
	"files.autoGuessEncoding": false,

	// Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
	//  - off: An editor with changes is never automatically saved.
	//  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
	//  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
	"files.autoSave": "off",

	// Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
	"files.defaultLanguage": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "auto",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore` setting for ignorings files based on your `.gitignore`.
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": false,

	// Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
	"files.participants.timeout": 60000,

	// Controls if files that were part of a refactoring are saved automatically
	"files.refactoring.autoSave": true,

	// Restore the undo stack when a file is reopened.
	"files.restoreUndoStack": true,

	// A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
	//  - askUser: Will refuse to save and ask for resolving the save conflict manually.
	//  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
	"files.saveConflictResolution": "askUser",

	// Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// Configure paths or glob patterns to exclude from file watching. Paths or basic glob patterns that are relative (for example `build/output` or `*.js`) will be resolved to an absolute path using the currently opened workspace. Complex glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
	"files.watcherInclude": [],

	// Controls the font size (in pixels) of the screencast mode keyboard.
	"screencastMode.fontSize": 56,

	// Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Controls what is displayed in the keyboard overlay when showing shortcuts.
	//  - keys: Keys.
	//  - command: Command title.
	//  - commandWithGroup: Command title prefixed by its group.
	//  - commandAndKeys: Command title and keys.
	//  - commandWithGroupAndKeys: Command title and keys, with the command prefixed by its group.
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",

	// Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Controls the size (in pixels) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorSize": 20,

	// Only show keyboard shortcuts in screencast mode.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
	"screencastMode.verticalOffset": 20,

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether turning on Zen Mode also hides workbench tabs.
	"zenMode.hideTabs": true,

	// Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.
	"zenMode.restore": true,

	// Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out.
	"zenMode.silentNotifications": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,

	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,

	// Specifies the uncommitted changes format of the current line blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting.
	// 
	// **NOTE**: Setting this to an empty string will disable current line blame annotations for uncommitted changes.
	"gitlens.currentLine.uncommittedChangesFormat": null,

	// Controls whether the Explorer should automatically reveal and select files when opening them.
	//  - true: Files will be revealed and selected.
	//  - false: Files will not be revealed and selected.
	//  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
	"explorer.autoReveal": true,

	// Configure glob patterns for excluding files and folders from being revealed and selected in the Explorer when they are opened. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"explorer.autoRevealExclude": {
		"**/node_modules": true,
		"**/bower_components": true
	},

	// Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
	"explorer.compactFolders": true,

	// Controls whether the Explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// Controls whether the Explorer should ask for confirmation when undoing.
	//  - verbose: Explorer will prompt before all undo operations.
	//  - default: Explorer will prompt before destructive undo operations.
	//  - light: Explorer will not prompt before undo operations when focused.
	"explorer.confirmUndo": "default",

	// The path separation character used when copying relative file paths.
	//  - /: Use slash as path separation character.
	//  - \: Use backslash as path separation character.
	//  - auto: Uses operating system specific path separation character.
	"explorer.copyRelativePathSeparator": "auto",

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.
	"explorer.enableDragAndDrop": true,

	// Controls whether the Explorer should support undoing file and folder operations.
	"explorer.enableUndo": true,

	// Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to `files.exclude`.
	"explorer.excludeGitIgnore": false,

	// Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization
	"explorer.expandSingleFolderWorkspaces": true,

	// Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
	"explorer.fileNesting.enabled": false,

	// Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
	"explorer.fileNesting.expand": true,

	// Controls nesting of files in the Explorer. `explorer.fileNesting.enabled` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
	// - `${capture}`: Matches the resolved value of the `*` from the parent pattern
	// - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
	// - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
	// - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
	// - `*`:  Matches any string, may only be used once per child pattern
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
	},

	// Controls what naming strategy to use when a giving a new name to a duplicated Explorer item on paste.
	//  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number.
	//  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number.
	//  - disabled: Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.
	"explorer.incrementalNaming": "simple",

	// The minimum number of editor slots shown in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
	"explorer.openEditors.minVisible": 0,

	// Controls the sorting order of editors in the Open Editors pane.
	//  - editorOrder: Editors are ordered in the same order editor tabs are shown.
	//  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
	//  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
	"explorer.openEditors.sortOrder": "editorOrder",

	// The maximum number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
	"explorer.openEditors.visible": 9,

	// Controls the property-based sorting of files and folders in the Explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
	//  - default: Files and folders are sorted by their names. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
	//  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
	//  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
	"explorer.sortOrder": "default",

	// Controls the lexicographic sorting of file and folder names in the Explorer.
	//  - default: Uppercase and lowercase names are mixed together.
	//  - upper: Uppercase names are grouped together before lowercase names.
	//  - lower: Lowercase names are grouped together before uppercase names.
	//  - unicode: Names are sorted in Unicode order.
	"explorer.sortOrderLexicographicOptions": "default",

	// Specifies the command to be executed when an _authors_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for commits within the range
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ CodeLens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies how to format absolute dates in the Git CodeLens. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.codeLens.dateFormat": null,

	// Specifies whether to provide any Git CodeLens, by default. Use the `Toggle Git CodeLens` command (`gitlens.toggleCodeLens`) to toggle the Git CodeLens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git CodeLens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the commit details
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ CodeLens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git CodeLens will be shown in the document
	//  - document: Adds CodeLens at the top of the document
	//  - containers: Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)
	//  - blocks: Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,

	// Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies the string to be shown in place of the _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

	// Specifies the string to be shown in place of the _recent change_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git CodeLens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the commit details
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,

	// Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,

	// Controls the positioning of the actionbar on rows in the search view.
	//  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "right",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Controls whether search file decorations should use badges.
	"search.decorations.badges": true,

	// Controls whether search file decorations should use colors.
	"search.decorations.colors": true,

	// Controls the default search result view mode.
	//  - tree: Shows search results as a tree.
	//  - list: Shows search results as a list.
	"search.defaultViewMode": "list",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting.
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// Controls whether the search view should read or modify the shared find clipboard on macOS.
	"search.globalFindClipboard": false,

	// This setting is deprecated. You can drag the search icon to a new location instead.
	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": false,

	// Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
	"search.maxResults": 20000,

	// Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor.
	//  - view: Search in the search view, either in the panel or side bars.
	//  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
	//  - newEditor: Search in a new search editor.
	"search.mode": "view",

	// Controls sorting order of editor history in quick open when filtering.
	//  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
	//  - recency: History entries are sorted by recency. More recently opened entries appear first.
	"search.quickOpen.history.filterSortOrder": "default",

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configure effect of double clicking a result in a search editor.
	//  - selectWord: Double clicking selects the word under the cursor.
	//  - goToLocation: Double clicking opens the result in the active editor group.
	//  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Search all files as you type.
	"search.searchOnType": true,

	// When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
	"search.searchOnTypeDebouncePeriod": 300,

	// Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
	"search.seedOnFocus": false,

	// Enable seeding search from the word nearest the cursor when the active editor has no selection.
	"search.seedWithNearestWord": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls sorting order of search results.
	//  - default: Results are sorted by folder and file names, in alphabetical order.
	//  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
	//  - type: Results are sorted by file extensions, in alphabetical order.
	//  - modified: Results are sorted by file last modified date, in descending order.
	//  - countDescending: Results are sorted by count per file, in descending order.
	//  - countAscending: Results are sorted by count per file, in ascending order.
	"search.sortOrder": "default",

	// Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useParentIgnoreFiles": false,

	// Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
	"http.proxy": "",

	// The value to send as the `Proxy-Authorization` header for every network request.
	"http.proxyAuthorization": null,

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs.
	"http.proxyStrictSSL": true,

	// Use the proxy support for extensions.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
	"http.systemCertificates": true,

	// Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
	"keyboard.dispatch": "code",

	// Enables the macOS touchbar buttons on the keyboard if available.
	"keyboard.touchbar.enabled": true,

	// A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).
	"keyboard.touchbar.ignored": [],

	// This setting is deprecated, please use 'update.mode' instead.
	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	"update.channel": "default",

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - start: Check for updates only on startup. Disable automatic background update checks.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "default",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// This setting is deprecated in favor of `comments.openView`.
	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Controls when the comments view should open.
	//  - never: The comments view will never be opened.
	//  - file: The comments view will open when a file with comments is active.
	//  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
	"comments.openView": "firstFile",

	// Determines if relative time will be used in comment timestamps (ex. '1 day ago').
	"comments.useRelativeTime": true,

	// Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command "Comments: Toggle Editor Commenting" toggles comments.
	"comments.visible": true,

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Automatically show values for variables that are lazily resolved by the debugger, such as getters.
	"debug.autoExpandLazyVariables": false,

	// Controls whether to confirm when the window closes if there are active debug sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are debug sessions.
	"debug.confirmOnExit": "never",

	// Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.
	"debug.console.acceptSuggestionOnEnter": "off",

	// Controls if the Debug Console should be automatically closed when the debug session ends.
	"debug.console.closeOnEnd": false,

	// Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.
	"debug.console.collapseIdenticalLines": true,

	// Controls the font family in the Debug Console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the Debug Console.
	"debug.console.fontSize": 12,

	// Controls if the Debug Console should suggest previously typed input.
	"debug.console.historySuggestions": true,

	// Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls if the lines should wrap in the Debug Console.
	"debug.console.wordWrap": true,

	// Show Source Code in Disassembly View.
	"debug.disassemblyView.showSourceCode": true,

	// Controls whether the editor should be focused when the debugger breaks.
	"debug.focusEditorOnBreak": true,

	// Controls whether the workbench window should be focused when the debugger breaks.
	"debug.focusWindowOnBreak": true,

	// Show variable values inline in editor while debugging.
	//  - on: Always show variable values inline in editor while debugging.
	//  - off: Never show variable values inline in editor while debugging.
	//  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
	"debug.inlineValues": "auto",

	// Controls when the internal Debug Console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls what to do when errors are encountered after running a preLaunchTask.
	//  - debugAnyway: Ignore task errors and start debugging.
	//  - showErrors: Show the Problems view and do not start debugging.
	//  - prompt: Prompt user.
	//  - abort: Cancel debugging.
	"debug.onTaskErrors": "prompt",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnDebugBreak",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls what editors to save before starting a debug session.
	//  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
	//  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
	//  - none: Don't save any editors before starting a debug session.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Controls whether breakpoints should be shown in the overview ruler.
	"debug.showBreakpointsInOverviewRuler": false,

	// Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
	"debug.showInlineBreakpointCandidates": true,

	// Controls when the debug Status bar should be visible.
	//  - never: Never show debug in Status bar
	//  - always: Always show debug in Status bar
	//  - onFirstSessionStart: Show debug in Status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Before starting a new debug session in an integrated or external terminal, clear the terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
	"html.autoCreateQuotes": true,

	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// Keep all existing new lines when formatting.
	"json.format.keepLines": false,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,

	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,

	// Associate schemas to JSON files in the current project.
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Enable/disable JSON validation.
	"json.validate.enable": true,

	// Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
	"markdown.editor.drop.enabled": true,

	// Enable pasting files into a Markdown editor inserts Markdown links. Requires enabling `editor.experimental.pasteActions.enabled`.
	"markdown.experimental.editor.pasteLinks.enabled": true,

	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",

	// Enable highlighting link occurrences in the current document.
	"markdown.occurrencesHighlight.enabled": false,

	// Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"markdown.preview.breaks": false,

	// Double click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Convert URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,

	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Enable some language-neutral replacement and quotes beautification in the Markdown preview.
	"markdown.preview.typographer": false,

	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable path suggestions while writing links in Markdown files.
	"markdown.suggest.paths.enabled": true,

	// Enable debug logging for the Markdown extension.
	"markdown.trace.extension": "off",

	// Traces the communication between VS Code and the Markdown language server.
	"markdown.trace.server": "off",

	// Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
	//  - prompt: Prompt on each file move.
	//  - always: Always update links automatically.
	//  - never: Never try to update link and don't prompt.
	"markdown.updateLinksOnFileMove.enabled": "never",

	// Enable updating links when a directory is moved or renamed in the workspace.
	"markdown.updateLinksOnFileMove.enableForDirectories": true,

	// Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],

	// Validate duplicated definitions in the current file.
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",

	// Enable all error reporting in Markdown files.
	"markdown.validate.enabled": false,

	// Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fileLinks.enabled": "warning",

	// Validate the fragment part of links to headers in other files in Markdown files, for example `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

	// Validate fragment links to headers in the current Markdown file, for example `[link](#header)`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fragmentLinks.enabled": "warning",

	// Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
	"markdown.validate.ignoredLinks": [],

	// Validate reference links in Markdown files, for example `[link][ref]`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.referenceLinks.enabled": "warning",

	// Validate link definitions that are unused in the current file.
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",

	// Enable debug logging for the markdown extension.
	"markdown.trace": "verbose",

	// Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"preview.preview.breaks": false,

	// Double click in the markdown preview to switch to the editor.
	"preview.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the markdown preview.
	"preview.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the markdown preview.
	"preview.preview.fontSize": 14,

	// Controls the line height used in the markdown preview. This number is relative to the font size.
	"preview.preview.lineHeight": 1.6,

	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"preview.preview.linkify": true,

	// Mark the current editor selection in the markdown preview.
	"preview.preview.markEditorSelection": true,

	// Controls how links to other markdown files in the markdown preview should be opened.
	//  - inPreview: Try to open links in the markdown preview
	//  - inEditor: Try to open links in the editor
	"preview.preview.openMarkdownLinks": "inPreview",

	// When a markdown preview is scrolled, update the view of the editor.
	"preview.preview.scrollEditorWithPreview": true,

	// When a markdown editor is scrolled, update the view of the preview.
	"preview.preview.scrollPreviewWithEditor": true,

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"javascript.inlayHints.variableTypes.enabled": false,

	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"javascript.preferences.autoImportFileExcludePatterns": [],

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for Quick Fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"javascript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames.
	"javascript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members.
	"javascript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable generating `@returns` annotations for JSDoc templates.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
	"js/ts.implicitProjectConfig.module": "ESNext",

	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": true,

	// Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
	"js/ts.implicitProjectConfig.target": "ES2020",

	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,

	// Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,

	// Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"typescript.inlayHints.variableTypes.enabled": false,

	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
	"typescript.locale": "auto",

	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",

	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"typescript.preferences.autoImportFileExcludePatterns": [],

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for Quick Fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"typescript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames.
	"typescript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members.
	"typescript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable snippet completions from TS Server.
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// Enable/disable generating `@returns` annotations for JSDoc templates.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Enable/disable snippet completions for methods in object literals. Requires using TypeScript 4.7+ in the workspace.
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": "",

	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,

	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// The maximum amount of memory (in MB) to allocate to the TypeScript server process.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
	//  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
	//  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
	//  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
	"typescript.tsserver.useSyntaxServer": "auto",

	// Configure which watching strategies should be used to keep track of files and directories.
	"typescript.tsserver.watchOptions": {},

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,

	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies whether to enable experimental multi-select support in the views.
	// **NOTE**: Requires a restart to take effect.
	"gitlens.views.experimental.multiSelect.enabled": false,

	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",

	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",

	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${stashOnRef, }${agoOrDate}",

	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,

	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,

	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,

	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.commits.showBranchComparison": "working",

	// Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
	"testing.alwaysRevealTestOnStateChange": false,

	// Configures when the error Peek view is automatically opened.
	//  - failureAnywhere: Open automatically no matter where the failure is.
	//  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
	//  - never: Never automatically open.
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Controls whether to automatically open the Peek view during auto-run mode.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
	"testing.autoRun.delay": 1000,

	// Controls which tests are automatically run.
	//  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
	//  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
	"testing.autoRun.mode": "all",

	// Controls the action to take when left-clicking on a test decoration in the gutter.
	//  - run: Run the test.
	//  - debug: Debug the test.
	//  - contextMenu: Open the context menu for more options.
	"testing.defaultGutterClickAction": "run",

	// Controls whether the running test should be followed in the Test Explorer view.
	"testing.followRunningTest": true,

	// Controls whether test decorations are shown in the editor gutter.
	"testing.gutterEnabled": true,

	// Controls when the testing view should open.
	//  - neverOpen: Never automatically open the testing view
	//  - openOnTestStart: Open the testing view when tests start
	//  - openOnTestFailure: Open the testing view on any test failure
	"testing.openTesting": "openOnTestStart",

	// Control whether save all dirty editors before running a test.
	"testing.saveBeforeTest": true,

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.views.commitDetails.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commitDetails.autolinks.enhanced": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commit Details_ view
	"gitlens.views.commitDetails.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `tree` or `auto`
	"gitlens.views.commitDetails.files.compact": true,

	// Specifies how the _Commit Details_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commitDetails.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commitDetails.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `auto`
	"gitlens.views.commitDetails.files.threshold": 5,

	// Specifies whether to query for associated pull requests. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commitDetails.pullRequests.enabled": true,

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"css.format.braceStyle": "collapse",

	// Enable/disable default CSS formatter.
	"css.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
	"css.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"css.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"css.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"css.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"css.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"less.format.braceStyle": "collapse",

	// Enable/disable default LESS formatter.
	"less.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
	"less.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"less.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"less.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"less.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"less.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.repositories.branches.showBranchComparison": "branch",

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": true,

	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,

	// Specifies whether to show the worktrees for each repository in the _Repositories_ view
	"gitlens.views.repositories.showWorktrees": true,

	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": false,

	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,

	// Specifies how the _File History_ view will display files when showing the history of a folder
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"scss.format.braceStyle": "collapse",

	// Enable/disable default SCSS formatter.
	"scss.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
	"scss.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"scss.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"scss.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"scss.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"scss.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,

	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,

	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,

	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,

	// Specifies whether to query for pull requests associated with each branch and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with each branch in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,

	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.branches.showBranchComparison": "branch",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,

	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,

	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,

	// Specifies whether to query for pull requests associated with each branch and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with each branch in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,

	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,

	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,

	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,

	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,

	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when tags names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,

	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,

	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
	//  - true: Download and install updates automatically for all extensions.
	//  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.
	//  - false: Extensions are not automatically updated.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// Configure an extension to execute in a different extension host process.
	"extensions.experimental.affinity": {},

	// When enabled, the extension host will be launched using the new UtilityProcess Electron API.
	"extensions.experimental.useUtilityProcess": false,

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
	"extensions.supportUntrustedWorkspaces": {},

	// Override the virtual workspaces support of an extension.
	"extensions.supportVirtualWorkspaces": {},

	// Enable web worker extension host.
	//  - true: The Web Worker Extension Host will always be launched.
	//  - false: The Web Worker Extension Host will never be launched.
	//  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
	"extensions.webWorker": "auto",

	// Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
	"output.smartScroll.enabled": true,

	// List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
	"settingsSync.ignoredExtensions": [],

	// Configure settings to be ignored while synchronizing.
	"settingsSync.ignoredSettings": [],

	// Synchronize keybindings for each platform.
	"settingsSync.keybindingsPerPlatform": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Worktrees_ view
	"gitlens.views.worktrees.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `tree` or `auto`
	"gitlens.views.worktrees.files.compact": true,

	// Specifies how the _Worktrees_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.worktrees.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.worktrees.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `auto`
	"gitlens.views.worktrees.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the worktree branch and commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the worktree branch in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForCommits": true,

	// Specifies whether to reveal worktrees in the _Worktrees_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.worktrees.reveal": true,

	// Specifies whether to show a comparison of the worktree branch with a user-selected reference (branch, tag. etc) in the _Worktrees_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the worktree branch with a user-selected reference
	"gitlens.views.worktrees.showBranchComparison": "working",

	// Specifies the default path in which new worktrees will be created
	"gitlens.worktrees.defaultLocation": null,

	// Specifies whether to prompt for a path when creating new worktrees
	"gitlens.worktrees.promptForLocation": true,

	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,

	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,

	// Specifies whether to reveal contributors in the _Contributors_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.contributors.reveal": true,

	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,

	// Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
	"gitlens.views.contributors.showStatistics": false,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,

	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,

	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

	// Controls whether code cells in the interactive window are collapsed by default.
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// When enabled notebook breadcrumbs contain code cells.
	"notebook.breadcrumbs.showCodeCells": true,

	// Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.
	"notebook.cellFocusIndicator": "gutter",

	// Where the cell toolbar should be shown, or whether it should be hidden.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Whether the cell toolbar should appear on hover or click.
	"notebook.cellToolbarVisibility": "click",

	// Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
	"notebook.compactView": true,

	// Control whether outputs action should be rendered in the output toolbar.
	"notebook.consolidatedOutputButton": true,

	// Control whether extra actions are shown in a dropdown next to the run button.
	"notebook.consolidatedRunButton": false,

	// Whether to use the enhanced text diff editor for notebook.
	"notebook.diff.enablePreview": true,

	// Hide Metadata Differences
	"notebook.diff.ignoreMetadata": false,

	// Hide Outputs Differences
	"notebook.diff.ignoreOutputs": false,

	// Priority list for output mime types
	"notebook.displayOrder": [],

	// Control whether the notebook editor should allow moving cells through drag and drop.
	"notebook.dragAndDropEnabled": true,

	// Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
	"notebook.editorOptionsCustomizations": {},

	// Control whether to render a global toolbar inside the notebook editor.
	"notebook.globalToolbar": true,

	// Control whether the actions on the notebook toolbar should render label or not.
	"notebook.globalToolbarShowLabel": "always",

	// Control where the insert cell actions should appear.
	//  - betweenCells: A toolbar that appears on hover between cells.
	//  - notebookToolbar: The toolbar at the top of the notebook editor.
	//  - both: Both toolbars.
	//  - hidden: The insert actions don't appear anywhere.
	"notebook.insertToolbarLocation": "both",

	// Controls the type of kernel picker to use.
	//  - all: Show all kernels.
	//  - mru: Experiment: show recently used kernels.
	"notebook.kernelPicker.type": "all",

	// Controls the display of line numbers in the cell editor.
	"notebook.lineNumbers": "off",

	// Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
	"notebook.markup.fontSize": 0,

	// When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// When enabled notebook outline shows code cells.
	"notebook.outline.showCodeCells": false,

	// Control how many lines of text in a text output is rendered.
	"notebook.output.textLineLimit": 30,

	// The font family for the output text for notebook cells. When set to empty, the `editor.fontFamily` is used.
	"notebook.outputFontFamily": "",

	// Font size for the output text for notebook cells. When set to 0, `editor.fontSize` is used.
	"notebook.outputFontSize": 0,

	// Line height of the output text for notebook cells.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"notebook.outputLineHeight": 22,

	// Whether the cell status bar should be shown.
	//  - hidden: The cell Status bar is always hidden.
	//  - visible: The cell Status bar is always visible.
	//  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
	"notebook.showCellStatusBar": "visible",

	// Controls when the Markdown header folding arrow is shown.
	//  - always: The folding controls are always visible.
	//  - never: Never show the folding controls and reduce the gutter size.
	//  - mouseover: The folding controls are visible only on mouseover.
	"notebook.showFoldingControls": "mouseover",

	// Whether to use separate undo/redo stack for each cell.
	"notebook.undoRedoPerCell": true,

	// When enabled slow renderers are automatically profiled
	"application.experimental.rendererProfiling": false,

	// Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
	"interactiveWindow.alwaysScrollOnNewCell": true,

	// Controls whether the Interactive Window sessions/history should be restored across window reloads. Whether the state of controllers used in Interactive Windows is persisted across window reloads are controlled by extensions contributing controllers.
	"interactiveWindow.restore": false,

	// When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched
	//  - integrated: Use VS Code's integrated terminal.
	//  - external: Use the configured external terminal.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

	// Specifies whether to show avatar images in the file blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent file blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in file blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.blame.dateFormat": null,

	// Specifies the format of the file blame annotations. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the file blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the file blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the file blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the file blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether file blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the file blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
	"terminal.integrated.allowChords": true,

	// Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
	"terminal.integrated.allowMnemonics": false,

	// If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
	"terminal.integrated.altClickMovesCursor": true,

	// The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.linux` (now deprecated) is set.
	"terminal.integrated.automationProfile.linux": null,

	// The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.osx` (now deprecated) is set.
	"terminal.integrated.automationProfile.osx": null,

	// The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.
	"terminal.integrated.automationProfile.windows": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.linux`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.linux": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.osx`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.osx": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.windows`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.windows": null,

	// A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
	// 
	// Remarks:
	// 
	// - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
	// - The message includes escape sequences so the reply might not happen with styled text.
	// - Each reply can only happen once every second.
	// - Use `"\r"` in the reply to mean the enter key.
	// - To unset a default key, set the value to null.
	// - Restart VS Code if new don't apply.
	"terminal.integrated.autoReplies": {},

	// The number of milliseconds to show the bell within a terminal tab when triggered.
	"terminal.integrated.bellDuration": 1000,

	// A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
	// 
	// &nbsp;
	// 
	// Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
	// 
	// &nbsp;
	// 
	// The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
	// 
	// &nbsp;
	// 
	// Default Skipped Commands:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.quickFix
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm when the window closes if there are active terminal sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are terminals.
	//  - hasChildProcesses: Confirm if there are any terminals that have child processes.
	"terminal.integrated.confirmOnExit": "never",

	// Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
	//  - never: Never confirm.
	//  - editor: Confirm if the terminal is in the editor.
	//  - panel: Confirm if the terminal is in the panel.
	//  - always: Confirm if the terminal is either in the editor or panel.
	"terminal.integrated.confirmOnKill": "editor",

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor.
	"terminal.integrated.cursorStyle": "block",

	// Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
	"terminal.integrated.cursorWidth": 1,

	// Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer.
	"terminal.integrated.customGlyphs": true,

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls where newly created terminals will appear.
	//  - editor: Create terminals in the editor
	//  - view: Create terminals in the terminal view
	"terminal.integrated.defaultLocation": "view",

	// The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
	"terminal.integrated.defaultProfile.linux": null,

	// The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
	//  - null: Automatically detect the default
	//  - bash: $(terminal-bash) bash
	// - path: /bin/bash
	// - args: ['-l']
	//  - csh: $(terminal) csh
	// - path: /bin/csh
	//  - dash: $(terminal) dash
	// - path: /bin/dash
	//  - ksh: $(terminal) ksh
	// - path: /bin/ksh
	//  - sh: $(terminal) sh
	// - path: /bin/sh
	//  - tcsh: $(terminal) tcsh
	// - path: /bin/tcsh
	//  - zsh: $(terminal) zsh
	// - path: /bin/zsh
	// - args: ['-l']
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug-nightly
	"terminal.integrated.defaultProfile.osx": null,

	// The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
	"terminal.integrated.defaultProfile.windows": null,

	// Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
	//  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
	//  - off: Do not set the `$LANG` environment variable.
	//  - on: Always set the `$LANG` environment variable.
	"terminal.integrated.detectLocale": "auto",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Controls whether the terminal bell is enabled. This shows up as a visual bell next to the terminal's name.
	"terminal.integrated.enableBell": false,

	// Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
	"terminal.integrated.enableFileLinks": true,

	// Show a warning dialog when pasting multiple lines into the terminal. The dialog does not show when:
	// 
	// - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
	// - The paste is handled by the shell's readline (in the case of pwsh)
	"terminal.integrated.enableMultiLinePasteWarning": true,

	// Persist terminal sessions/history for the workspace across window reloads.
	"terminal.integrated.enablePersistentSessions": true,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
	//  - off: Disable the indicator.
	//  - on: Enable the indicator.
	//  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
	"terminal.integrated.environmentChangesRelaunch": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 12,

	// The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeightBold": "bold",

	// Controls whether the terminal will leverage the GPU to do its rendering.
	//  - auto: Let VS Code detect which renderer will give the best experience.
	//  - on: Enable GPU acceleration within the terminal.
	//  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
	//  - canvas: Use the terminal's fallback canvas renderer which uses a 2d context instead of webgl which may perform better on some systems. Note that some features are limited in the canvas renderer like opaque selection.
	"terminal.integrated.gpuAcceleration": "auto",

	// A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
	//  - on: Always enabled
	//  - off: Always disabled
	//  - auto: Enabled only for remote workspaces
	"terminal.integrated.localEchoEnabled": "auto",

	// Local echo will be disabled when any of these program names are found in the terminal title.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Terminal style of locally echoed text; either a font style or an RGB color.
	"terminal.integrated.localEchoStyle": "dim",

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
	// 
	// - 1: Do nothing and use the standard theme colors.
	// - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
	// - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21: White on black or black on white.
	"terminal.integrated.minimumContrastRatio": 4.5,

	// A multiplier to be used on the `deltaY` of mouse wheel scroll events.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
	// 
	// Caveats:
	// 
	// - Restoring of the process current working directory depends on whether it is supported by the shell.
	// - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
	//  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
	//  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
	//  - never: Never restore the terminal buffers or recreate the process.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
	"terminal.integrated.persistentSessionScrollback": 100,

	// The Linux profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The macOS profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The Windows profiles to present when creating a new terminal via the terminal dropdown. Use the `source` property to automatically detect the shell's location. Or set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"Ubuntu-20.04 (WSL)": null`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - paste: Paste on right click.
	//  - selectWord: Select the word under the cursor and show the context menu.
	//  - nothing: Do nothing and pass event to terminal.
	"terminal.integrated.rightClickBehavior": "selectWord",

	// Controls the maximum number of lines the terminal keeps in its buffer.
	"terminal.integrated.scrollback": 1000,

	// Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
	"terminal.integrated.sendKeybindingsToShell": false,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.linux": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.osx": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.windows": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.linux": [],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.windows": [],

	// When shell integration is enabled, adds a decoration for each command.
	//  - both: Show decorations in the gutter (left) and overview ruler (right)
	//  - gutter: Show gutter decorations to the left of the terminal
	//  - overviewRuler: Show overview ruler decorations to the right of the terminal
	//  - never: Do not show decorations
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",

	// Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. 
	// 
	// Shell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.
	// 
	// Supported shells:
	// 
	// - Linux/macOS: bash, pwsh, zsh
	//  - Windows: pwsh
	// 
	// This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
	// 
	//  Note that the script injection may not work if you have custom arguments defined in the terminal profile, a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `terminal.integrated.shellIntegrations.decorationsEnabled`
	"terminal.integrated.shellIntegration.enabled": true,

	// Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
	"terminal.integrated.shellIntegration.history": 100,

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Whether to show hovers for links in the terminal output.
	"terminal.integrated.showLinkHover": true,

	// Controls whether the terminal will scroll using an animation.
	"terminal.integrated.smoothScrolling": false,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// A theme color ID to associate with terminal icons by default.
	"terminal.integrated.tabs.defaultColor": null,

	// A codicon ID to associate with terminal icons by default.
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - drop-down-button: $(drop-down-button)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle: $(circle)
	//  - circle-outline: $(circle-outline)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - compare-changes: $(compare-changes)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-closed: $(issue-closed)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - debug-alt: $(debug-alt)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-filled: $(map-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - comment-draft: $(comment-draft)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	"terminal.integrated.tabs.defaultIcon": "terminal",

	// Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to the terminal by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// Controls whether terminal tab statuses support animation (eg. in progress tasks).
	"terminal.integrated.tabs.enableAnimation": true,

	// Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
	"terminal.integrated.tabs.enabled": true,

	// Controls whether focusing the terminal of a tab happens on double or single click.
	//  - singleClick: Focus the terminal when clicking a terminal tab
	//  - doubleClick: Focus the terminal when double clicking a terminal tab
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Controls whether the terminal tabs view will hide under certain conditions.
	//  - never: Never hide the terminal tabs view
	//  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
	//  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
	//  - left: Show the terminal tabs view to the left of the terminal
	//  - right: Show the terminal tabs view to the right of the terminal
	"terminal.integrated.tabs.location": "right",

	// Separator used by `terminal.integrated.tabs.title` and `terminal.integrated.tabs.title`.
	"terminal.integrated.tabs.separator": " - ",

	// Controls whether terminal split and kill buttons are displays next to the new terminal button.
	//  - always: Always show the actions
	//  - singleTerminal: Show the actions when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.
	//  - always: Always show the active terminal
	//  - singleTerminal: Show the active terminal when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the active terminal
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Controls the terminal title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to the terminal by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.title": "${process}",

	// Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
	//  - 6: Version 6 of Unicode. This is an older version which should work better on older systems.
	//  - 11: Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Controls whether or not WSL distros are shown in the terminal dropdown
	"terminal.integrated.useWslProfiles": true,

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// A string containing all characters to be considered word separators by the double click to select word feature.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// Enable automatic tasks - note that tasks won't run in an untrusted workspace.
	//  - on: Always
	//  - off: Never
	"task.allowAutomaticTasks": "on",

	// Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
	"task.autoDetect": "on",

	// Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
	"task.problemMatchers.neverPrompt": false,

	// Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
	"task.quickOpen.detail": true,

	// Controls the number of recent items tracked in task quick open dialog.
	"task.quickOpen.history": 30,

	// Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
	"task.quickOpen.showAll": false,

	// Controls whether the task quick pick is skipped when there is only one task to pick from.
	"task.quickOpen.skip": false,

	// On window reload, reconnect to tasks that have problem matchers.
	"task.reconnection": true,

	// Save all dirty editors before running a task.
	//  - always: Always saves all editors before running.
	//  - never: Never saves editors before running.
	//  - prompt: Prompts whether to save editors before running.
	"task.saveBeforeRun": "always",

	// Shows decorations at points of interest in the terminal buffer such as the first problem found via a watch task. Note that this will only take effect for future tasks. `terminal.integrated.shellIntegration.decorationsEnabled` will take precedence over this setting
	"task.showDecorations": true,

	// Configures whether a warning is shown when a provider is slow
	"task.slowProviderWarning": true,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Show Errors & Warnings on files and folder.
	"problems.decorations.enabled": true,

	// Controls the default view mode of the Problems view.
	"problems.defaultViewMode": "tree",

	// When enabled shows the current problem in the status bar.
	"problems.showCurrentInStatus": false,

	// Controls the order in which problems are navigated.
	//  - severity: Navigate problems ordered by severity
	//  - position: Navigate problems ordered by position
	"problems.sortOrder": "severity",

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Render breadcrumb items with icons.
	"breadcrumbs.icons": true,

	// When enabled breadcrumbs show `array`-symbols.
	"breadcrumbs.showArrays": true,

	// When enabled breadcrumbs show `boolean`-symbols.
	"breadcrumbs.showBooleans": true,

	// When enabled breadcrumbs show `class`-symbols.
	"breadcrumbs.showClasses": true,

	// When enabled breadcrumbs show `constant`-symbols.
	"breadcrumbs.showConstants": true,

	// When enabled breadcrumbs show `constructor`-symbols.
	"breadcrumbs.showConstructors": true,

	// When enabled breadcrumbs show `enumMember`-symbols.
	"breadcrumbs.showEnumMembers": true,

	// When enabled breadcrumbs show `enum`-symbols.
	"breadcrumbs.showEnums": true,

	// When enabled breadcrumbs show `event`-symbols.
	"breadcrumbs.showEvents": true,

	// When enabled breadcrumbs show `field`-symbols.
	"breadcrumbs.showFields": true,

	// When enabled breadcrumbs show `file`-symbols.
	"breadcrumbs.showFiles": true,

	// When enabled breadcrumbs show `function`-symbols.
	"breadcrumbs.showFunctions": true,

	// When enabled breadcrumbs show `interface`-symbols.
	"breadcrumbs.showInterfaces": true,

	// When enabled breadcrumbs show `key`-symbols.
	"breadcrumbs.showKeys": true,

	// When enabled breadcrumbs show `method`-symbols.
	"breadcrumbs.showMethods": true,

	// When enabled breadcrumbs show `module`-symbols.
	"breadcrumbs.showModules": true,

	// When enabled breadcrumbs show `namespace`-symbols.
	"breadcrumbs.showNamespaces": true,

	// When enabled breadcrumbs show `null`-symbols.
	"breadcrumbs.showNull": true,

	// When enabled breadcrumbs show `number`-symbols.
	"breadcrumbs.showNumbers": true,

	// When enabled breadcrumbs show `object`-symbols.
	"breadcrumbs.showObjects": true,

	// When enabled breadcrumbs show `operator`-symbols.
	"breadcrumbs.showOperators": true,

	// When enabled breadcrumbs show `package`-symbols.
	"breadcrumbs.showPackages": true,

	// When enabled breadcrumbs show `property`-symbols.
	"breadcrumbs.showProperties": true,

	// When enabled breadcrumbs show `string`-symbols.
	"breadcrumbs.showStrings": true,

	// When enabled breadcrumbs show `struct`-symbols.
	"breadcrumbs.showStructs": true,

	// When enabled breadcrumbs show `typeParameter`-symbols.
	"breadcrumbs.showTypeParameters": true,

	// When enabled breadcrumbs show `variable`-symbols.
	"breadcrumbs.showVariables": true,

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// Specifies where the indicators of the file changes annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.changes.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies how the file changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",

	// Specifies the age of the most recent change (in days) after which the file heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,

	// Specifies the base color of the file heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the whether to fade out older lines
	"gitlens.heatmap.fadeLines": true,

	// Specifies the base color of the file heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies where the indicators of the file heatmap annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.heatmap.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies how the file heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// Specifies whether to show avatar images instead of author initials and remote icons in the _Commit Graph_
	"gitlens.graph.avatars": true,

	// Specifies the order by which commits will be shown on the _Commit Graph_
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.graph.commitOrdering": "date",

	// Specifies how absolute dates will be formatted in the _Commit Graph_. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.graph.dateFormat": null,

	// Specifies how dates will be displayed in the _Commit Graph_
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.graph.dateStyle": "relative",

	// Specifies the default number of items to show in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.defaultItemLimit": 500,

	// Specifies whether to dim (deemphasize) merge commit rows in the _Commit Graph_
	"gitlens.graph.dimMergeCommits": false,

	// Specifies whether to highlight rows associated with the branch / tag when hovering over it in the _Commit Graph_
	"gitlens.graph.highlightRowsOnRefHover": true,

	// Specifies the number of additional items to fetch when paginating in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.pageItemLimit": 200,

	// Specifies the number of rows from the edge at which the graph will scroll when using keyboard or search to change the selected row
	"gitlens.graph.scrollRowPadding": 0,

	// Specifies the number of results to gather when searching in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.searchItemLimit": 100,

	// Specifies when to show the _Commit Details_ view for the selected row in the _Commit Graph_
	//  - false: Never shows the _Commit Details_ view automatically
	//  - open: Shows the _Commit Details_ view automatically only when opening the _Commit Graph_
	//  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Commit Graph_
	"gitlens.graph.showDetailsView": "selection",

	// Specifies whether to show a ghost branch / tag when hovering over or selecting a row in the _Commit Graph_
	"gitlens.graph.showGhostRefsOnRowHover": true,

	// Specifies whether to show remote names on remote branches in the _Commit Graph_
	"gitlens.graph.showRemoteNames": false,

	// Specifies whether to show the _Commit Graph_ in the status bar
	"gitlens.graph.statusBar.enabled": true,

	// Specifies the limit on the how many commits can be queried for statistics in the Visual File History, because of rate limits. Only applies to virtual workspaces.
	"gitlens.visualHistory.queryLimit": 20,

	// Specifies how Git commits are displayed in the _Interactive Rebase Editor_
	//  - asc: Shows oldest commit first
	//  - desc: Shows newest commit first
	"gitlens.rebaseEditor.ordering": "desc",

	// Specifies when to show the _Commit Details_ view for the selected row in the _Interactive Rebase Editor_
	//  - false: Never shows the _Commit Details_ view automatically
	//  - open: Shows the _Commit Details_ view automatically only when opening the _Interactive Rebase Editor_
	//  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Interactive Rebase Editor_
	"gitlens.rebaseEditor.showDetailsView": "selection",

	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,

	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,

	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,

	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,

	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,

	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,

	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	//  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
	//  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
	//  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
	//  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
	//  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
	//  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
	//  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
	//  - pull:menu: Skips pull confirmations when run from the Git Command Palette
	//  - push:command: Skips push confirmations when run from a command, e.g. a view action
	//  - push:menu: Skips push confirmations when run from the Git Command Palette
	//  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
	//  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
	//  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
	//  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
	//  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
	//  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
	//  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
	//  - switch:menu: Skips switch confirmations when run from the Git Command Palette
	//  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
	//  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command"
	],

	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
	// Enable crash reports to be collected. This helps us improve stability. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
	// Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=786907) about what we collect and our privacy statement.
	"telemetry.enableTelemetry": true,

	// 
	// Controls Visual Studio Code telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Visual Studio Code is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=786907). A full restart of the application is necessary for crash reporting changes to take effect.
	// 
	// &nbsp;
	// 
	// The following table outlines the data sent with each setting:
	// 
	// |       | Crash Reports | Error Telemetry | Usage Data |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
	// 
	//  - all: Sends usage data, errors, and crash reports.
	//  - error: Sends general error telemetry and crash reports.
	//  - crash: Sends OS level crash reports.
	//  - off: Disables all product telemetry.
	"telemetry.telemetryLevel": "all",

	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,

	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies the configuration of a partner integration
	"gitlens.partners": null,

	// Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
	"gitlens.remotes": null,

	// Specifies whether to use VS Code as Git's `core.editor` for Gitlens terminal commands
	"gitlens.terminal.overrideGitEditor": true,

	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,

	// Specifies whether to show the _Commit Details_ view when clicking on a commit link in the integrated terminal
	"gitlens.terminalLinks.showDetailsView": true,

	// Controls whether Outline items are collapsed or expanded.
	//  - alwaysCollapse: Collapse all items.
	//  - alwaysExpand: Expand all items.
	"outline.collapseItems": "alwaysExpand",

	// Render Outline elements with icons.
	"outline.icons": true,

	// Use badges for errors and warnings on Outline elements.
	"outline.problems.badges": true,

	// Use colors for errors and warnings on Outline elements.
	"outline.problems.colors": true,

	// Show errors and warnings on Outline elements.
	"outline.problems.enabled": true,

	// When enabled, Outline shows `array`-symbols.
	"outline.showArrays": true,

	// When enabled, Outline shows `boolean`-symbols.
	"outline.showBooleans": true,

	// When enabled, Outline shows `class`-symbols.
	"outline.showClasses": true,

	// When enabled, Outline shows `constant`-symbols.
	"outline.showConstants": true,

	// When enabled, Outline shows `constructor`-symbols.
	"outline.showConstructors": true,

	// When enabled, Outline shows `enumMember`-symbols.
	"outline.showEnumMembers": true,

	// When enabled, Outline shows `enum`-symbols.
	"outline.showEnums": true,

	// When enabled, Outline shows `event`-symbols.
	"outline.showEvents": true,

	// When enabled, Outline shows `field`-symbols.
	"outline.showFields": true,

	// When enabled, Outline shows `file`-symbols.
	"outline.showFiles": true,

	// When enabled, Outline shows `function`-symbols.
	"outline.showFunctions": true,

	// When enabled, Outline shows `interface`-symbols.
	"outline.showInterfaces": true,

	// When enabled, Outline shows `key`-symbols.
	"outline.showKeys": true,

	// When enabled, Outline shows `method`-symbols.
	"outline.showMethods": true,

	// When enabled, Outline shows `module`-symbols.
	"outline.showModules": true,

	// When enabled, Outline shows `namespace`-symbols.
	"outline.showNamespaces": true,

	// When enabled, Outline shows `null`-symbols.
	"outline.showNull": true,

	// When enabled, Outline shows `number`-symbols.
	"outline.showNumbers": true,

	// When enabled, Outline shows `object`-symbols.
	"outline.showObjects": true,

	// When enabled, Outline shows `operator`-symbols.
	"outline.showOperators": true,

	// When enabled, Outline shows `package`-symbols.
	"outline.showPackages": true,

	// When enabled, Outline shows `property`-symbols.
	"outline.showProperties": true,

	// When enabled, Outline shows `string`-symbols.
	"outline.showStrings": true,

	// When enabled, Outline shows `struct`-symbols.
	"outline.showStructs": true,

	// When enabled, Outline shows `typeParameter`-symbols.
	"outline.showTypeParameters": true,

	// When enabled, Outline shows `variable`-symbols.
	"outline.showVariables": true,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateFormat": null,

	// Specifies the locale, a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags), to use for date formatting, defaults to the VS Code locale. Use `system` to follow the current system locale, or choose a specific locale, e.g `en-US` — US English, `en-GB` — British English, `de-DE` — German, 'ja-JP = Japanese, etc.
	"gitlens.defaultDateLocale": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultTimeFormat": null,

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scm": {
			"graph": true
		},
		"scmRepositoryInline": {
			"graph": true
		},
		"scmRepository": {
			"authors": true,
			"graph": false
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true
		},
		"scmItemInline": {},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": false,
			"stash": true
		}
	},

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,

	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,

	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,

	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false,
		"suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
		"suppressIntegrationRequestFailed500Warning": false,
		"suppressIntegrationRequestTimedOutWarning": false
	},

	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories. Defaults to `git.repositoryScanMaxDepth`
	"gitlens.advanced.repositorySearchDepth": null,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Deprecated. This setting is no longer used
	// Deprecated. This setting is no longer used
	"gitlens.advanced.useSymmetricDifferenceNotation": null,

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies debug mode
	"gitlens.debug": false,

	// Specifies whether to attempt to detect nested repositories when opening files
	"gitlens.detectNestedRepositories": false,

	// Specifies whether to allow the collection of product usage telemetry
	"gitlens.telemetry.enabled": true,

	// Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
	"timeline.pageOnScroll": false,

	// The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
	"timeline.pageSize": null,

	// Configure settings to be overridden for the ansible language.
	"[ansible]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the azure-pipelines language.
	"[azure-pipelines]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the csharp language.
	"[csharp]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for the css language.
	"[css]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the django-html language.
	"[django-html]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// Configure settings to be overridden for the dockercompose language.
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure settings to be overridden for the dockerfile language.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure settings to be overridden for the git-commit language.
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for the git-rebase language.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for the go language.
	"[go]":  {
		"editor.insertSpaces": false,
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
				"source.organizeImports": true
		},
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configure settings to be overridden for the handlebars language.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the html language.
	"[html]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the javascript language.
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for the json language.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the jsonc language.
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the less language.
	"[less]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the makefile language.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for the markdown language.
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": false
	},

	// Configure settings to be overridden for the plaintext language.
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// Configure settings to be overridden for the postcss language.
	"[postcss]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the python language.
	"[python]":  {
		"gitlens.codeLens.symbolScopes": [
				"!Module"
		],
		"editor.wordBasedSuggestions": false
	},

	// Configure settings to be overridden for the quokka-output language.
	"[quokka-output]":  {
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.unicodeHighlight.excludedCharacters": [],
		"editor.unicodeHighlight.nonBasicASCII": false,
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.includeComments": false
	},

	// Configure settings to be overridden for the quokka-recent language.
	"[quokka-recent]":  {
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.unicodeHighlight.excludedCharacters": [],
		"editor.unicodeHighlight.nonBasicASCII": false,
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.includeComments": false
	},

	// Configure settings to be overridden for the quokka-timeline language.
	"[quokka-timeline]":  {
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.unicodeHighlight.excludedCharacters": [],
		"editor.unicodeHighlight.nonBasicASCII": false,
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.includeComments": false
	},

	// Configure settings to be overridden for the scss language.
	"[scss]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the search-result language.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configure settings to be overridden for the shellscript language.
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configure settings to be overridden for the stylus language.
	"[stylus]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the vue language.
	"[vue]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for the yaml language.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "keep",
		"gitlens.codeLens.scopes": [
				"document"
		],
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Plays a sound when the focus moves to a deleted line in diff review mode
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.diffLineDeleted": "auto",

	// Plays a sound when the focus moves to an inserted line in diff review mode
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.diffLineInserted": "auto",

	// Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
	// 
	"audioCues.enabled": null,

	// Plays a sound when the active line has a breakpoint.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasBreakpoint": "auto",

	// Plays a sound when the active line has an error.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasError": "auto",

	// Plays a sound when the active line has a folded area that can be unfolded.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasFoldedArea": "auto",

	// Plays a sound when the active line has an inline suggestion.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasInlineSuggestion": "auto",

	// Plays a sound when the active line has a warning.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasWarning": "off",

	// Plays a sound when trying to read a line with inlay hints that has no inlay hints.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.noInlayHints": "auto",

	// Plays a sound when a notebook cell execution is successfully completed.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.notebookCellCompleted": "auto",

	// Plays a sound when a notebook cell execution fails.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.notebookCellFailed": "auto",

	// Plays a sound when the debugger stopped on a breakpoint.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.onDebugBreak": "auto",

	// Plays a sound when a task is completed.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.taskCompleted": "auto",

	// Plays a sound when a task fails (non-zero exit code).
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.taskFailed": "auto",

	// Plays a sound when terminal Quick Fixes are available.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.terminalQuickFix": "auto",

	// The volume of the audio cues in percent (0-100).
	"audioCues.volume": 70,

	// The name under which the remote tunnel access is registered. If not set, the host name is used.
	"remote.tunnels.access.hostNameOverride": "",

	// When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
	"remote.autoForwardPorts": true,

	// Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
	//  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
	//  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
	"remote.autoForwardPortsSource": "process",

	// When enabled extensions are downloaded locally and installed on remote.
	"remote.downloadExtensionsLocally": false,

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Specifies the local host name that will be used for port forwarding.
	"remote.localPortHost": "localhost",

	// Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Set properties that are applied when a specific port number is forwarded. For example:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// Restores the ports you forwarded in a workspace.
	"remote.restoreForwardedPorts": true,

	// 
	//  - smart: Uses the default diffing algorithm.
	//  - experimental: Uses an experimental diffing algorithm.
	"mergeEditor.diffAlgorithm": "experimental",

	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
	"emmet.useInlineCompletions": false,

	// Variables to be used in Emmet snippets.
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Prefix used when creating a new branch.
	"git.branchPrefix": "",

	// List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
	"git.branchProtection": [],

	// Controls whether a prompt is being shown before changes are committed to a protected branch.
	//  - alwaysCommit: Always commit changes to the protected branch.
	//  - alwaysCommitToNewBranch: Always commit changes to a new branch.
	//  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
	"git.branchProtectionPrompt": "alwaysPrompt",

	// List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
	//  - adjectives: A random adjective
	//  - animals: A random animal name
	//  - colors: A random color name
	//  - numbers: A random number between 100 and 999
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],

	// Controls whether a random name is generated when creating a new branch.
	"git.branchRandomName.enable": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
	"git.branchWhitespaceChar": "-",

	// Controls what type of git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
	"git.closeDiffOnOperation": false,

	// List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
	"git.commandsToLog": [],

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Open the merge editor for files that are currently under conflict.
	"git.mergeEditor": false,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Controls whether to optimistically update the state of the Source Control view after running git commands.
	"git.optimisticUpdate": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Run a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'git push' after a successful commit.
	//  - sync: Run 'git pull' and 'git push' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
	"git.pullBeforeCheckout": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// Remember the last git command that ran after a commit.
	"git.rememberPostCommitCommand": false,

	// List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
	"git.repositoryScanMaxDepth": 1,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether an action button is shown in the Source Control view.
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalGitEditor": false,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls whether to show uncommitted changes in the Timeline view.
	"git.timeline.showUncommitted": false,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
	"git.useEditorAsCommitInput": true,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
	"git.useIntegratedAskPass": true,

	// Enable verbose output when `git.useEditorAsCommitInput` is enabled.
	"git.verboseCommit": false,

	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,

	// Controls which protocol is used to clone a GitHub repository
	"github.gitProtocol": "https",

	// GitHub Enterprise Server URI
	"github-enterprise.uri": "",

	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",

	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",

	// Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
	"ipynb.pasteImagesAsAttachments.enabled": true,

	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",

	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to run scripts.
	//  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
	//  - npm: Use npm as the package manager for running scripts.
	//  - yarn: Use yarn as the package manager for running scripts.
	//  - pnpm: Use pnpm as the package manager for running scripts.
	"npm.packageManager": "auto",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
	"npm.scriptExplorerExclude": [],

	// Display hover with 'Run' and 'Debug' commands for scripts.
	"npm.scriptHover": true,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Allow duplicate lines on oversized sample
	"random-sample.allowDuplicatesOnOversizedSample": false,

	// Default Size of Sample
	"random-sample.defaultSize": 10,

	// Sample file used when sampling `again` without selecting a file (URL or file path)
	"random-sample.initialSampleFile": "",

	// Quick Samples to insert predefined Samples from a file or URL
	"random-sample.quickSamples": [
		{
			"title": "Magic 8 Ball",
			"description": "Ask me a question and I will answer it for you",
			"size": 1,
			"entries": [
				"It is certain",
				"Without a doubt",
				"Definitely",
				"Most likely",
				"Outlook good",
				"Yes!",
				"Try again",
				"Reply hazy",
				"Can't predict",
				"No!",
				"Unlikely",
				"Sources say no",
				"Very doubtful"
			]
		},
		{
			"title": "Country",
			"description": "Pick a random country",
			"size": 1,
			"file": "https://gist.githubusercontent.com/kalinchernev/486393efcca01623b18d/raw/daa24c9fea66afb7d68f8d69f0c4b8eeb9406e83/countries"
		}
	],

	// Skip Empty lines (one of 'file', 'selection', true, false)
	"random-sample.skipEmptyLines": true,

	// Skip lines at the beginning of the file (mapped by file ending)
	"random-sample.skipLines": {
		"csv": 1
	},

	// Set the execution environment for the preview
	//  - browser: Execute code in web browser
	//  - node: Execute code in Node.js
	"liveCode.defaultPlatform": "browser",

	// Wether to render JSX elements in the preview panel (browser platform only)
	"liveCode.renderJSX": true,

	// Wether to show line numbers in the preview panel
	"liveCode.showLineNumbers": true,

	// Activates the i18n features for snippets (eg.: _(""))
	"django.i18n": true,

	// Seldom show notifications about this extension
	"django.showContributeNotification": true,

	// Exclude Python snippets by their file name. Can be 'import', 'postgres'...
	"django.snippets.exclude": [
		"cms",
		"wagtail"
	],

	// Activates the Python snippets
	"django.snippets.use": true,

	// Resolves `ArrayAccess` and `Traversable` implementations that are unioned with a typed array to generic syntax. eg `ArrayAccessOrTraversable|ElementType[]` => `ArrayAccessOrTraversable<mixed, ElementType>`.
	"intelephense.compatibility.correctForArrayAccessArrayAndTraversableArrayUnionTypes": true,

	// Resolves `BaseClass|static` union types to `static` instead of `BaseClass`.
	"intelephense.compatibility.correctForBaseClassStaticUnionTypes": true,

	// Global namespace constants and functions will be fully qualified (prefixed with a backslash).
	"intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,

	// Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
	"intelephense.completion.insertUseDeclaration": true,

	// The maximum number of completion items returned per request.
	"intelephense.completion.maxItems": 100,

	// Method and function completions will include parentheses and trigger parameter hints.
	"intelephense.completion.triggerParameterHints": true,

	// Enables argument count diagnostics.
	"intelephense.diagnostics.argumentCount": true,

	// Enables deprecated diagnostics.
	"intelephense.diagnostics.deprecated": true,

	// Enables duplicate symbol diagnostics.
	"intelephense.diagnostics.duplicateSymbols": true,

	// Enables diagnostics in embedded languages.
	"intelephense.diagnostics.embeddedLanguages": true,

	// Enables diagnostics.
	"intelephense.diagnostics.enable": true,

	// Enables reporting of problems associated with method and class implementations. For example, unimplemented methods or method signature incompatibilities.
	"intelephense.diagnostics.implementationErrors": true,

	// Enables reporting of various language constraint errors.
	"intelephense.diagnostics.languageConstraints": true,

	// Controls when diagnostics are run.
	//  - onType: Diagnostics will run as changes are made to the document.
	//  - onSave: Diagnostics will run when the document is saved.
	"intelephense.diagnostics.run": "onType",

	// Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.
	"intelephense.diagnostics.typeErrors": true,

	// Enables undefined class constant diagnostics.
	"intelephense.diagnostics.undefinedClassConstants": true,

	// Enables undefined constant diagnostics.
	"intelephense.diagnostics.undefinedConstants": true,

	// Enables undefined function diagnostics.
	"intelephense.diagnostics.undefinedFunctions": true,

	// Enables undefined method diagnostics.
	"intelephense.diagnostics.undefinedMethods": true,

	// Enables undefined static property diagnostics.
	"intelephense.diagnostics.undefinedProperties": true,

	// DEPRECATED. Use the setting for each symbol category.
	"intelephense.diagnostics.undefinedSymbols": true,

	// Enables undefined class, interface and trait diagnostics.
	"intelephense.diagnostics.undefinedTypes": true,

	// Enables undefined variable diagnostics.
	"intelephense.diagnostics.undefinedVariables": true,

	// Enables unexpected token diagnostics.
	"intelephense.diagnostics.unexpectedTokens": true,

	// Enables unused variable, private member, and import diagnostics.
	"intelephense.diagnostics.unusedSymbols": true,

	// The directory of the entry point to the application (directory of index.php). Can be absolute or relative to the workspace folder. Used for resolving script inclusion and path suggestions.
	"intelephense.environment.documentRoot": "",

	// The include paths (as individual path items) as defined in the include_path ini setting or paths to external libraries. Can be absolute or relative to the workspace folder. Used for resolving script inclusion and/or adding external symbols to folder.
	"intelephense.environment.includePaths": [],

	// A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics. PHP 5.3.0 and greater supported.
	"intelephense.environment.phpVersion": "8.1.0",

	// When enabled '<?' will be parsed as a PHP open tag. Defaults to true.
	"intelephense.environment.shortOpenTag": true,

	// Configure glob patterns to make files available for language server features. Inherits from files.associations.
	"intelephense.files.associations": [
		"*.php",
		"*.phtml"
	],

	// Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
	"intelephense.files.exclude": [
		"**/.git/**",
		"**/.svn/**",
		"**/.hg/**",
		"**/CVS/**",
		"**/.DS_Store/**",
		"**/node_modules/**",
		"**/bower_components/**",
		"**/vendor/**/{Tests,tests}/**",
		"**/.history/**",
		"**/vendor/**/vendor/**"
	],

	// Maximum file size in bytes.
	"intelephense.files.maxSize": 1000000,

	// Controls formatting style of braces
	//  - psr12: PHP-FIG PSR-2 and PSR-12 style. A mix of Allman and K&R
	//  - allman: Allman. Opening brace on the next line.
	//  - k&r: K&R (1TBS). Opening brace on the same line.
	"intelephense.format.braces": "psr12",

	// Enables formatting.
	"intelephense.format.enable": true,

	// DEPRECATED. Don't use this. Go to command palette and search for enter licence key.
	"intelephense.licenceKey": "",

	// Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.
	"intelephense.maxMemory": 0,

	// An object that describes the format of generated class/interface/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.classTemplate": {
		"summary": "$1",
		"tags": [
			"@package ${1:$SYMBOL_NAMESPACE}"
		]
	},

	// An object that describes the format of generated function/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.functionTemplate": {
		"summary": "$1",
		"tags": [
			"@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2",
			"@return ${1:$SYMBOL_TYPE} $2",
			"@throws ${1:$SYMBOL_TYPE} $2"
		]
	},

	// An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.propertyTemplate": {
		"summary": "$1",
		"tags": [
			"@var ${1:$SYMBOL_TYPE}"
		]
	},

	// Adds `@return void` to auto generated phpdoc for definitions that do not return a value.
	"intelephense.phpdoc.returnVoid": true,

	// 
	//  - snippet: Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.
	//  - text: Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server.
	"intelephense.phpdoc.textFormat": "snippet",

	// Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.
	"intelephense.phpdoc.useFullyQualifiedNames": false,

	// Glob patterns matching files and folders that should be excluded from references search.
	"intelephense.references.exclude": [
		"**/vendor/**"
	],

	// Glob patterns matching files and folders that should be excluded when renaming symbols. Rename operation will fail if the symbol definition is found in the excluded files/folders.
	"intelephense.rename.exclude": [
		"**/vendor/**"
	],

	// Controls the scope of a namespace rename operation.
	//  - single: Only symbols defined in the current file are affected. For example, this makes a rename of a namespace the equivalent of a single move class operation.
	//  - all: All symbols that share this namespace, not necessarily defined in the current file will be affected. For example it would move all classes that share this namespace to the new namespace.
	"intelephense.rename.namespaceMode": "single",

	// Path to a Node.js executable. Use this if you wish to use a different version of Node.js. Defaults to Node.js shipped with VSCode.
	"intelephense.runtime": "",

	// Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
	"intelephense.stubs": [
		"apache",
		"bcmath",
		"bz2",
		"calendar",
		"com_dotnet",
		"Core",
		"ctype",
		"curl",
		"date",
		"dba",
		"dom",
		"enchant",
		"exif",
		"FFI",
		"fileinfo",
		"filter",
		"fpm",
		"ftp",
		"gd",
		"gettext",
		"gmp",
		"hash",
		"iconv",
		"imap",
		"intl",
		"json",
		"ldap",
		"libxml",
		"mbstring",
		"meta",
		"mysqli",
		"oci8",
		"odbc",
		"openssl",
		"pcntl",
		"pcre",
		"PDO",
		"pdo_ibm",
		"pdo_mysql",
		"pdo_pgsql",
		"pdo_sqlite",
		"pgsql",
		"Phar",
		"posix",
		"pspell",
		"readline",
		"Reflection",
		"session",
		"shmop",
		"SimpleXML",
		"snmp",
		"soap",
		"sockets",
		"sodium",
		"SPL",
		"sqlite3",
		"standard",
		"superglobals",
		"sysvmsg",
		"sysvsem",
		"sysvshm",
		"tidy",
		"tokenizer",
		"xml",
		"xmlreader",
		"xmlrpc",
		"xmlwriter",
		"xsl",
		"Zend OPcache",
		"zip",
		"zlib"
	],

	// Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
	"intelephense.telemetry.enabled": null,

	// Traces the communication between VSCode and the intelephense language server.
	"intelephense.trace.server": "off",

	// Uses the legacy module resolving.
	"standard._legacyModuleResolve": false,

	// Turns auto fix on save on or off.
	"standard.autoFixOnSave": false,

	// Controls whether JavaScript Standard Style is enabled for JavaScript files or not.
	"standard.enable": true,

	// Controls whether VSCode should use an alternate Standard engine, like semistandard, standardx or ts-standard.
	"standard.engine": "standard",

	// A path added to NODE_PATH when resolving the standard module.
	"standard.nodePath": null,

	// The standard options object to provide args normally passed to JavaScript Standard Style when executed from a command line.
	"standard.options": {},

	// Run the linter on save (onSave) or on type (onType)
	"standard.run": "onType",

	// Traces the communication between VSCode and the JavaScript Standard Style linter service.
	"standard.trace.server": "off",

	// Activate JavaScript Standard Style based on project's package.json settings, use globally installed standard module if set to "false"
	"standard.usePackageJson": false,

	// An array of language ids which should be validated by JavaScript Standard Style
	"standard.validate": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact"
	],

	// 
	"standard.workingDirectories": [],

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// If defined, unmapped absolute path imports are based on this location.  Takes priority over 'absolutePathToWorkspace' if both are defined
	"path-intellisense.absolutePathTo": "",

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Automatically triggers next suggestion after previous suggestion
	"path-intellisense.autoTriggerNextSuggestion": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Ignores tsconfig file for mappings
	"path-intellisense.ignoreTsConfigBaseUrl": false,

	// Mappings for paths.  The values should be interpreted as absolute paths (and can use '${workspaceFolder}')
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// Shows suggestions when the import starts with a forward slash ('/')
	"path-intellisense.showOnAbsoluteSlash": true,

	// Whether to execute code in modules that are not imported as if they where in main script
	"pythonLiveCoding.executeNotImported": false,

	// Whether to execute code in untitled documents as if they where in main script
	"pythonLiveCoding.executeUntitled": true,

	// Path to the python interpreter to be used
	"pythonLiveCoding.interpreterPath": "python3",

	// Name of the keyword that will be reserved for use in the __main__ module
	"pythonLiveCoding.reservedKeyword": "__python_live_coding_reserved_keyword",

	// Mocha: Environment variables to run your tests
	"mocha.env": {},

	// Mocha: Glob to search for test files
	"mocha.files.glob": "test/**/*.js",

	// Mocha: Globs to ignore when searching for test files
	"mocha.files.ignore": [
		"**/.git/**/*",
		"**/node_modules/**/*"
	],

	// Mocha: Options to run Mocha
	"mocha.options": {},

	// Viewer follow vscode theme.
	"vscode-office.autoTheme": true,

	// Set the chromium browser location for exporting markdown pdf.
	"vscode-office.chromiumPath": "",

	// You could change your editor language.
	"vscode-office.editorLanguage": "en_US",

	// Open markdown outline.
	"vscode-office.openOutline": true,

	// Markdown paste image path.
	"vscode-office.pasterImgPath": "image/${fileName}/${now}.png",

	// Printed pdf default top margin.
	"vscode-office.pdfMarginTop": 25,

	// Preview code in markdown.
	"vscode-office.previewCode": true,

	// Support view absolute path image from markdown viewer.
	"vscode-office.viewAbsoluteLocal": false,

	// Always show the ESlint status bar item.
	"eslint.alwaysShowStatus": false,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine"
	},

	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,

	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,

	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.execArgv": null,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,

	// A special rules customization section for text cells in notebook documents.
	"eslint.notebooks.rules.customizations": [],

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},

	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	"eslint.runtime": null,

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],

	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],

	// Set whether all modules can be imported.
	"pythonPreview.allowAllModules": true,

	// Set code and navigation area width.
	"pythonPreview.codAndNavWidth": 510,

	// Control the font family used in the code display area.
	"pythonPreview.code.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels in the code display area.
	"pythonPreview.code.fontSize": 15,

	// Control the line height used in the code.
	"pythonPreview.code.lineHeight": 1.2,

	// Control the font family used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontSize": 12,

	// Render functions with a 'func' prefix and not type label.
	"pythonPreview.compactFuncLabels": false,

	// Display all stack frames that have ever exited rather than only currently on the stack.
	"pythonPreview.cumulativeMode": true,

	// Control the background color used in dict, class and instance key in vscode dark theme.
	"pythonPreview.dark.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode dark theme.
	"pythonPreview.dark.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted arrow in vscode dark theme.
	"pythonPreview.dark.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode dark theme.
	"pythonPreview.dark.highlightedStackFrame.bgColor": "#800080",

	// Control the background color used in list, tuple and set in vscode dark theme.
	"pythonPreview.dark.list-tuple-setTbl.bgColor": "#ca6924",

	// Set how heap objects should be rendered. "true" render all heap objects at the top level. Otherwise, nest heap objects.
	"pythonPreview.disableHeapNesting": false,

	// Control the font family used in the python preview.
	"pythonPreview.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the python preview.
	"pythonPreview.fontSize": 16,

	// Control the font family used in the heap object.
	"pythonPreview.heapObject.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the heap object.
	"pythonPreview.heapObject.fontSize": 14,

	// Hide the code display.
	"pythonPreview.hideCode": false,

	// Control the background color used in dict, class and instance key in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedStackFrame.bgColor": "#ff7500",

	// Control the background color used in list, tuple and set in vscode high-contrast theme.
	"pythonPreview.high-contrast.list-tuple-setTbl.bgColor": "#ca6924",

	// Control the font family used in the lang display area.
	"pythonPreview.langDisplay.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the lang display area.
	"pythonPreview.langDisplay.fontSize": 14,

	// Control the font family used in the arrow legend.
	"pythonPreview.legend.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the arrow legend.
	"pythonPreview.legend.fontSize": 12,

	// Control the background color used in dict, class and instance key in vscode light theme.
	"pythonPreview.light.dict-class-instKey.bgColor": "#faebbf",

	// Control the background color used in dict, class and instance value in vscode light theme.
	"pythonPreview.light.dict-class-instVal.bgColor": "#ffffc6",

	// Control the color used in highlighted arrow in vscode light theme.
	"pythonPreview.light.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode light theme.
	"pythonPreview.light.highlightedStackFrame.bgColor": "#e9f1f6",

	// Control the background color used in list, tuple and set in vscode light theme.
	"pythonPreview.light.list-tuple-setTbl.bgColor": "#ffffc6",

	// Set the max number of executed lines, in order to against infinite loops.
	"pythonPreview.maxExecutedLines": 1000,

	// Control the font family used int the print output docs.
	"pythonPreview.printOutputDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels in the print output docs.
	"pythonPreview.printOutputDocs.fontSize": 12,

	// Control the font family used in the python stdout window.
	"pythonPreview.pyStdout.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels used in the python stdout window.
	"pythonPreview.pyStdout.fontSize": 14,

	// Control the font size in pixels used in the function return value.
	"pythonPreview.retVal.fontSize": 12,

	// Display frame and parent frame labels for all functions.
	"pythonPreview.showAllFrameLabels": false,

	// Control the font family used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontFamily": "erdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontSize": 14,

	// Control the font family used in the stack frame.
	"pythonPreview.stackFrame.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame.
	"pythonPreview.stackFrame.fontSize": 14,

	// Control the font family used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontSize": 14,

	// Render refrences using textual memory labels rather than as jsPlumb arrows.
	"pythonPreview.textualMemoryLabels": false,

	// Enable debug logging for the python-preview extension.
	"pythonPreview.trace": "off",

	// Control the font family used in the type label of heap object.
	"pythonPreview.typeLabel.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the type label of heap object.
	"pythonPreview.typeLabel.fontSize": 12,

	// Controls if snippets should add `import React from 'react';` at the top of components.
	// Use if you have React +17 and use jsx transform.
	"reactSnippets.settings.importReactOnTop": true,

	// defines the language scopes for which the snippets will be available.
	// Use comma separated values.
	// For example: `typescript,typescriptreact,javascript,javascriptreact`
	"reactSnippets.settings.languageScopes": "typescript,typescriptreact,javascript,javascriptreact",

	// [EXPERIMENTAL: MIGHT NOT WORK]: Integrate prettier settings with code generated from snippets.
	"reactSnippets.settings.prettierEnabled": false,

	// Controls if React components have typescript Props typing.
	"reactSnippets.settings.typescript": true,

	// Controls which prefix for typescript snippets should use for props/state.
	"reactSnippets.settings.typescriptPropsStatePrefix": "type",

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// Automatically generates an .editorconfig file according to your current editor settings.
	"editorconfig.generateAuto": true,

	// If generateAuto is false, this template path will be used for each newly-generated .editorconfig file.
	"editorconfig.template": "default",

	// npm bin name
	"npm.bin": "npm",

	// Enable npm commands in the macOS touchbar.
	"npm.enableTouchbar": false,

	// Look for 'package.json' files in these directories
	"npm.includeDirectories": [],

	// Show a warning that the keybindings have changed.
	"npm.keybindingsChangedWarningShown": false,

	// Enable the old cmd/ctrl R chording key bindings.
	"npm.oldKeybindings.enable": false,

	// Run npm commands in a terminal, otherwise shows the output in the output panel
	"npm.runInTerminal": true,

	// Look for 'package.json' in the root directory of the workspace
	"npm.useRootDirectory": true,

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// If true, puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.bracketSameLine": false,

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, enforces single attribute per line in HTML, Vue and JSX.
	"prettier.singleAttributePerLine": false,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// Enable or disable the automatic update check on launch of vscode
	"pip-updater.AutoUpdate": false,

	// Pip packages/versions to check
	"pip-updater.PackagesAndVersions": [],

	// Default timeout for download and installation of a given pip package
	"pip-updater.Timeout": 60000,

	// (optional) Virtual environment(s) in which pip packages should be installed/updated. Default is to use the default system environment and the default Python available in system PATH. If Python is not available in the PATH, this value is required.
	"pip-updater.VirtualEnv": [],

	// Type coverage diagnostic severity
	"flow.coverageSeverity": "info",

	// Is flow enabled
	"flow.enabled": true,

	// Set value to enable flow lazy mode
	"flow.lazyMode": null,

	// Log level for output panel logs
	"flow.logLevel": "info",

	// Absolute path to flow binary. Special var ${workspaceFolder} or ${flowconfigDir} can be used in path (NOTE: in windows you can use '/' and can omit '.cmd' in path)
	"flow.pathToFlow": "flow",

	// If true will show uncovered code by default
	"flow.showUncovered": false,

	// Stop Flow on Exit
	"flow.stopFlowOnExit": true,

	// Traces the communication between VSCode and the flow lsp service.
	"flow.trace.server": "off",

	// If true will use flow bundled with this plugin if nothing works
	"flow.useBundledFlow": true,

	// Complete functions with their parameter signature.
	"flow.useCodeSnippetOnFunctionSuggest": true,

	// Support using flow through your node_modules folder, WARNING: Checking this box is a security risk. When you open a project we will immediately run code contained within it.
	"flow.useNPMPackagedFlow": true,

	// Whether to enable AppInsights to track user telemetry data.
	"terminal.enableAppInsights": true,

	// Connection type
	//  - main thread: Connection is created on the main thread.
	//  - separate thread: Connection is created on a spearate thread.
	//  - any: Either main or separate thread connection, whichever succeeds first.
	"github.codespaces.connectionType": "main thread",

	// When a new codespace is created, open it in a new window.
	"github.codespaces.createCodespaceInNewWindow": false,

	// Default extensions to install in GitHub Codespaces
	"github.codespaces.defaultExtensions": [
		"GitHub.codespaces",
		"GitHub.vscode-pull-request-github"
	],

	// Select which type of notification to show when devcontainer content changes
	//  - none: No notification when devcontainer changes
	//  - notification: Standard toast notification when devcontainer changes
	//  - modal: Modal dialog notification when devcontainer changes
	"github.codespaces.devcontainerChangedNotificationStyle": "notification",

	// Display the Codespace Performance window in the Remote Explorer.
	"github.codespaces.showPerformanceExplorer": false,

	// When enabled, HTTPS services will be forwarded through our port forwarding service instead of local TCP server.
	"github.codespaces.usePortForwardingServiceForHTTPS": true,

	// Assigns the issue you're working on to you. Only applies when the issue you're working on is in a repo you currently have open.
	"githubIssues.assignWhenWorking": true,

	// Controls whether an issue number (ex. #1234) or a full url (ex. https://github.com/owner/name/issues/1234) is inserted when the Create Issue code action is run.
	"githubIssues.createInsertFormat": "number",

	// Strings that will cause the 'Create issue from comment' code action to show.
	"githubIssues.createIssueTriggers": [
		"TODO",
		"todo",
		"BUG",
		"FIXME",
		"ISSUE",
		"HACK"
	],

	// Languages that the '#' character should not be used to trigger issue completion suggestions.
	"githubIssues.ignoreCompletionTrigger": [
		"coffeescript",
		"diff",
		"dockerfile",
		"dockercompose",
		"ignore",
		"ini",
		"julia",
		"makefile",
		"perl",
		"powershell",
		"python",
		"r",
		"ruby",
		"shellscript",
		"yaml"
	],

	// An array of milestones titles to never show issues from.
	"githubIssues.ignoreMilestones": [],

	// Languages that the '@' character should not be used to trigger user completion suggestions.
	"githubIssues.ignoreUserCompletionTrigger": [
		"python"
	],

	// Advanced settings for the name of the branch that is created when you start working on an issue. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${sanitizedIssueTitle}` will be replaced with the issue title, with all spaces and unsupported characters (https://git-scm.com/docs/git-check-ref-format) removed
	"githubIssues.issueBranchTitle": "${user}/issue${issueNumber}",

	// Sets the format of issue completions in the SCM inputbox. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${issueNumberLabel}` will be replaced with a label formatted as #number or owner/repository#number, depending on whether the issue is in the current repository
	"githubIssues.issueCompletionFormatScm": "${issueTitle} ${issueNumberLabel}",

	// Controls whether completion suggestions are shown for issues.
	"githubIssues.issueCompletions.enabled": true,

	// Specifies what queries should be used in the GitHub issues tree using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The first query listed will be expanded in the Issues view. The "default" query includes issues assigned to you by Milestone. If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		},
		{
			"label": "Recent Issues",
			"query": "state:open repo:${owner}/${repository} sort:updated-desc"
		}
	],

	// Determines whether a branch should be checked out when working on an issue. To configure the name of the branch, set `githubIssues.issueBranchTitle`.
	//  - on: A branch will always be checked out when you start working on an issue. If the branch doesn't exist, it will be created.
	//  - off: A branch will not be created when you start working on an issue. If you have worked on an issue before and a branch was created for it, that same branch will be checked out.
	//  - prompt: A prompt will show for setting the name of the branch that will be created and checked out.
	"githubIssues.useBranchForIssues": "on",

	// Controls whether completion suggestions are shown for users.
	"githubIssues.userCompletions.enabled": true,

	// Sets the format of the commit message that is set in the SCM inputbox when you **Start Working on an Issue**. Defaults to `${issueTitle} 
	// Fixes #${issueNumber}`
	"githubIssues.workingIssueFormatScm": "${issueTitle} \nFixes ${issueNumberLabel}",

	// All pull requests created with this extension will be assigned to this user. To assign to yourself, use the '${user}' variable.
	"githubPullRequests.assignCreated": "",

	// Controls whether comments are expanded when a document with comments is opened.
	//  - expandUnresolved: All unresolved comments will be expanded.
	//  - collapseAll: All comments will be collapsed
	"githubPullRequests.commentExpandState": "expandUnresolved",

	// Create a pull request when a branch is published.
	//  - never: Never create a pull request when a branch is published.
	//  - ask: Ask if you want to create a pull request when a branch is published.
	"githubPullRequests.createOnPublishBranch": "ask",

	// When true, the option to delete the local branch will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectLocalBranch": true,

	// When true, the option to delete the remote will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectRemote": true,

	// The method to use when merging pull requests.
	"githubPullRequests.defaultMergeMethod": "merge",

	// The layout to use when displaying changed files list.
	"githubPullRequests.fileListLayout": "tree",

	// The layout to use when a pull request is checked out. Set to false to prevent layout changes.
	"githubPullRequests.focusedMode": "firstDiff",

	// Prevents branches that are associated with a pull request from being automatically detected. This will prevent review mode from being entered on these branches.
	"githubPullRequests.ignoredPullRequestBranches": [],

	// The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.
	// By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.
	"githubPullRequests.includeRemotes": "default",

	// Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request.
	"githubPullRequests.logLevel": "info",

	// If GitHub notifications should be shown to the user.
	"githubPullRequests.notifications": "off",

	// The default branch for a repository is set on github.com. With this setting, you can override that default with another branch.
	"githubPullRequests.overrideDefaultBranch": "",

	// The action to take after creating a pull request.
	//  - none: No action
	//  - openOverview: Open the overview page of the pull request
	"githubPullRequests.postCreate": "openOverview",

	// Pull changes from the remote when a PR branch is checked out locally. Changes are detected when the PR is manually refreshed and during periodic background updates.
	//  - prompt: Prompt to pull a PR branch when changes are detected in the PR.
	//  - never: Never pull a PR branch when changes are detected in the PR.
	//  - always: Always pull a PR branch when changes are detected in the PR. When `"git.autoStash": true` this will instead `prompt` to prevent unexpected file changes.
	"githubPullRequests.pullBranch": "prompt",

	// The description used when creating pull requests.
	//  - template: Use a pull request template and commit description, or just use the commit description if no templates were found
	//  - commit: Use the latest commit message only
	"githubPullRequests.pullRequestDescription": "template",

	// The pull request title now uses the same defaults as GitHub, and can be edited before create.
	// The title used when creating pull requests.
	//  - commit: Use the latest commit message
	//  - branch: Use the branch name
	//  - custom: Specify a custom title
	//  - ask: Ask which of the above methods to use
	"githubPullRequests.pullRequestTitle": "ask",

	// Push the "from" branch when creating a PR and the "from" branch is not available on the remote.
	//  - prompt: Prompt to push the branch when creating a PR and the "from" branch is not available on the remote.
	//  - always: Always push the branch when creating a PR and the "from" branch is not available on the remote.
	"githubPullRequests.pushBranch": "prompt",

	// Specifies what queries should be used in the GitHub Pull Requests tree. All queries are made against **the currently opened repos**. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories "Waiting For My Review", "Assigned To Me" and "Created By Me". If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],

	// List of remotes, by name, to fetch pull requests from.
	"githubPullRequests.remotes": [
		"origin",
		"upstream"
	],

	// This setting is deprecated. Views can now be dragged to any location.
	// When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.
	"githubPullRequests.showInSCM": false,

	// Default handler for terminal links.
	//  - github: Create the pull request on GitHub
	//  - vscode: Create the pull request in VS Code
	//  - ask: Ask which method to use
	"githubPullRequests.terminalLinksHandler": "ask",

	// Choose which pull request states will use review mode. "Open" pull requests will always use review mode.
	"githubPullRequests.useReviewMode": {
		"merged": true,
		"closed": false
	},

	// Automatically add vendor prefixes to unsupported CSS properties (e. g. transform -> -ms-transform). Specify what browsers to target with an array of strings (uses [Browserslist](https://github.com/ai/browserslist)). Pass `false` to turn off.
	"liveSassCompile.settings.autoprefix": "defaults",

	// Set this to `false` if you don't want all Sass files to be compiled when Live Sass Compiler starts watching.
	"liveSassCompile.settings.compileOnWatch": true,

	// All Sass/Scss files inside the folders will be excluded. 
	// 
	// Examples: 
	// '/**/node_modules/**',
	// '/.vscode/**', 
	// '/.history/**' 
	// 
	// Glob Patterns are accepted.
	"liveSassCompile.settings.excludeList": [
		"/**/node_modules/**",
		"/.vscode/**"
	],

	// Defines a subdirectory to search from (no directory outside of this will be search)
	"liveSassCompile.settings.forceBaseDirectory": null,

	// Set your exported CSS Styles, Formats & save location.
	"liveSassCompile.settings.formats": [
		{
			"format": "expanded",
			"extensionName": ".css",
			"savePath": null,
			"savePathReplacementPairs": null
		}
	],

	// Set to `false` if you don't want a `.map` file for each compiled CSS.
	// Default is `true`
	"liveSassCompile.settings.generateMap": true,

	// This setting is useful when you only deal with a few sass files. Only these Sass files will be included.
	// NOTE: There is no need to include partial sass files.
	"liveSassCompile.settings.includeItems": null,

	// Specific glob patterns to identify partial files/folders
	"liveSassCompile.settings.partialsList": [
		"/**/_*.s[ac]ss"
	],

	// A leading slash is relative to the workspace, not the drive (e.g C://)
	"liveSassCompile.settings.rootIsWorkspace": false,

	// Show the announcement whenever a new version is installed
	"liveSassCompile.settings.showAnnouncements": true,

	// Please use showOutputWindowOn instead
	// Backwards compatible setting for those migrating from the original extension
	"liveSassCompile.settings.showOutputWindow": null,

	// Set the level of logging that is recorded and shown to you.
	// Default is `Information`
	"liveSassCompile.settings.showOutputWindowOn": "Information",

	// Set this to `true` if you want Live Sass Compiler to automatically start watching your .sass or .scss file when you open an applicable workspace
	// Default is `false`
	"liveSassCompile.settings.watchOnLaunch": false,

	// Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
	"go.addTags": {
		"tags": "json",
		"options": "json=omitempty",
		"promptForTags": false,
		"transform": "snakecase",
		"template": ""
	},

	// Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools.
	"go.alternateTools": {},

	// Include unimported packages in auto-complete suggestions. Not applicable when using the language server.
	"go.autocompleteUnimportedPackages": false,

	// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildFlags": [],

	// Compiles code on file save using 'go build' or 'go test -c'. Options are 'workspace', 'package', or 'off'.  Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.buildOnSave": "package",

	// The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildTags": "",

	// This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
	"go.coverageDecorator": {
		"type": "highlight",
		"coveredHighlightColor": "rgba(64,128,128,0.5)",
		"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
		"coveredBorderColor": "rgba(64,128,128,0.5)",
		"uncoveredBorderColor": "rgba(128,64,64,0.25)",
		"coveredGutterStyle": "blockblue",
		"uncoveredGutterStyle": "slashyellow"
	},

	// Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
	"go.coverageOptions": "showBothCoveredAndUncoveredCode",

	// When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
	"go.coverMode": "default",

	// If true, runs 'go test -coverprofile' on save and shows test coverage.
	"go.coverOnSave": false,

	// If true, shows test coverage when Go: Test Function at cursor command is run.
	"go.coverOnSingleTest": false,

	// If true, shows test coverage when Go: Test Single File command is run.
	"go.coverOnSingleTestFile": false,

	// If true, shows test coverage when Go: Test Package command is run.
	"go.coverOnTestPackage": true,

	// When generating code coverage, should counts be shown as --374--
	"go.coverShowCounts": false,

	// Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
	"go.delveConfig": {},

	// (Experimental) vulncheck enables vulnerability scanning.
	// 
	//  - Imports: `"Imports"`: In Imports mode, `gopls` will report vulnerabilities that affect packages
	// directly and indirectly used by the analyzed main module.
	// 
	//  - Off: `"Off"`: Disable vulnerability analysis.
	// 
	"go.diagnostic.vulncheck": "Off",

	// If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
	"go.disableConcurrentTests": false,

	// Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.
	"go.docsTool": "godoc",

	// Experimental Feature: Enable/Disable entries from the context menu in the editor.
	"go.editorContextMenuCommands": {
		"toggleTestFile": true,
		"addTags": true,
		"removeTags": false,
		"fillStruct": false,
		"testAtCursor": true,
		"testFile": false,
		"testPackage": false,
		"generateTestForFunction": true,
		"generateTestForFile": false,
		"generateTestForPackage": false,
		"addImport": true,
		"testCoverage": true,
		"playground": true,
		"debugTestAtCursor": true,
		"benchmarkAtCursor": false
	},

	// Feature level setting to enable/disable code lens for references and run/debug tests
	"go.enableCodeLens": {
		"runtest": true
	},

	// Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
	"go.formatFlags": [],

	// When the language server is enabled and one of `default`/`gofmt`/`goimports`/`gofumpt` is chosen, the language server will handle formatting. If `custom` tool is selected, the extension will use the `customFormatter` tool in the `go.alternateTools` section.
	//  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
	//  - gofmt: Formats the file according to the standard Go style. (not applicable when the language server is enabled)
	//  - goimports: Organizes imports and formats the file with gofmt. (not applicable when the language server is enabled)
	//  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
	//  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt. . Use `gopls.format.gofumpt` instead)
	//  - custom: Formats using the custom tool specified as `customFormatter` in the `go.alternateTools` setting. The tool should take the input as STDIN and output the formatted code as STDOUT.
	"go.formatTool": "default",

	// Additional command line flags to pass to `gotests` for generating tests.
	"go.generateTestsFlags": [],

	// Enable gocode's autobuild feature. Not applicable when using the language server.
	"go.gocodeAutoBuild": false,

	// Additional flags to pass to gocode. Not applicable when using the language server.
	"go.gocodeFlags": [
		"-builtin",
		"-ignore-case",
		"-unimported-packages"
	],

	// Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.
	"go.gocodePackageLookupMode": "go",

	// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.
	"go.gopath": null,

	// Specifies the GOROOT to use when no environment variable is set.
	"go.goroot": null,

	// Folder names (not paths) to ignore while using Go to Symbol in Workspace feature. Not applicable when using the language server.
	"go.gotoSymbol.ignoreFolders": [],

	// If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeGoroot": false,

	// If false, the import statements will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeImports": false,

	// Infer GOPATH from the workspace root. This is ignored when using Go Modules.
	"go.inferGopath": false,

	// Enable/disable inlay hints for variable types in assign statements:
	// ```go
	// 	i/* int*/, j/* int*/ := 0, len(r)-1
	// ```
	"go.inlayHints.assignVariableTypes": false,

	// Enable/disable inlay hints for composite literal field names:
	// ```go
	// 	{/*in: */"Hello, world", /*want: */"dlrow ,olleH"}
	// ```
	"go.inlayHints.compositeLiteralFields": false,

	// Enable/disable inlay hints for composite literal types:
	// ```go
	// 	for _, c := range []struct {
	// 		in, want string
	// 	}{
	// 		/*struct{ in string; want string }*/{"Hello, world", "dlrow ,olleH"},
	// 	}
	// ```
	"go.inlayHints.compositeLiteralTypes": false,

	// Enable/disable inlay hints for constant values:
	// ```go
	// 	const (
	// 		KindNone   Kind = iota/* = 0*/
	// 		KindPrint/*  = 1*/
	// 		KindPrintf/* = 2*/
	// 		KindErrorf/* = 3*/
	// 	)
	// ```
	"go.inlayHints.constantValues": false,

	// Enable/disable inlay hints for implicit type parameters on generic functions:
	// ```go
	// 	myFoo/*[int, string]*/(1, "hello")
	// ```
	"go.inlayHints.functionTypeParameters": false,

	// Enable/disable inlay hints for parameter names:
	// ```go
	// 	parseInt(/* str: */ "123", /* radix: */ 8)
	// ```
	"go.inlayHints.parameterNames": false,

	// Enable/disable inlay hints for variable types in range statements:
	// ```go
	// 	for k/* int*/, v/* string*/ := range []string{} {
	// 		fmt.Println(k, v)
	// 	}
	// ```
	"go.inlayHints.rangeVariableTypes": false,

	// If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
	"go.installDependenciesWhenBuilding": false,

	// Temporary flag to enable/disable diagnostics from the language server. This setting will be deprecated soon. Please see and response to [Issue 50](https://github.com/golang/vscode-go/issues/50).
	"go.languageServerExperimentalFeatures": {
		"diagnostics": true
	},

	// Flags like -rpc.trace and -logfile to be used while running the language server.
	"go.languageServerFlags": [],

	// Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
	"go.lintFlags": [],

	// Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
	//  - file: lint the current file on file saving
	//  - package: lint the current package on file saving
	//  - workspace: lint all the packages in the current workspace root folder on file saving
	//  - off: do not run lint automatically
	"go.lintOnSave": "package",

	// Specifies Lint tool name.
	"go.lintTool": "staticcheck",

	// Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay. Not applicable when using the language server.
	"go.liveErrors": {
		"enabled": false,
		"delay": 500
	},

	// The logging level the extension logs at, defaults to 'error'
	"go.logging.level": "error",

	// The flags configured here will be passed through to command `goplay`
	"go.playground": {
		"openbrowser": true,
		"share": true,
		"run": true
	},

	// Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
	"go.removeTags": {
		"tags": "",
		"options": "",
		"promptForTags": false
	},

	// Prompt for surveys, including the gopls survey and the Go developer survey.
	"go.survey.prompt": true,

	// Apply the Go & PATH environment variables used by the extension to all integrated terminals.
	"go.terminal.activateEnvironment": true,

	// Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
	"go.testEnvFile": null,

	// Environment variables that will be passed to the process that runs the Go tests
	"go.testEnvVars": {},

	// Run benchmarks when running all tests in a file or folder.
	"go.testExplorer.alwaysRunBenchmarks": false,

	// Concatenate all test log messages for a given location into a single message.
	"go.testExplorer.concatenateMessages": true,

	// Enable the Go test explorer
	"go.testExplorer.enable": true,

	// Present packages in the test explorer flat or nested.
	"go.testExplorer.packageDisplayMode": "flat",

	// Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.
	"go.testExplorer.showDynamicSubtestsInEditor": false,

	// Open the test output terminal when a test run is started.
	"go.testExplorer.showOutput": true,

	// Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
	"go.testFlags": null,

	// Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
	"go.testOnSave": false,

	// The Go build tags to use for when running tests. If null, then buildTags will be used.
	"go.testTags": null,

	// Specifies the timeout for go test in ParseDuration format.
	"go.testTimeout": "30s",

	// Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS) and debuggee process launched by Delve. Format as string key:value pairs. When debugging, merged with `envFile` and `env` values with precedence `env` > `envFile` > `go.toolsEnvVars`.
	"go.toolsEnvVars": {},

	// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.
	"go.toolsGopath": null,

	// Automatically update the tools used by the extension, without prompting the user.
	"go.toolsManagement.autoUpdate": false,

	// Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
	//  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
	//  - local: checks only the minimum tools versions required by the extension
	//  - off: completely disables version check (not recommended)
	"go.toolsManagement.checkForUpdates": "proxy",

	// The path to the `go` binary used to install the Go tools. If it's empty, the same `go` binary chosen for the project will be used for tool installation.
	"go.toolsManagement.go": "",

	// Trace the communication between VS Code and the Go language server.
	"go.trace.server": "off",

	// Complete functions with their parameter signature, including the variable type. Not propagated to the language server.
	"go.useCodeSnippetsOnFunctionSuggest": false,

	// Complete functions with their parameter signature, excluding the variable types. Use `gopls.usePlaceholders` when using the language server.
	"go.useCodeSnippetsOnFunctionSuggestWithoutType": false,

	// Use `go.toolsManagement.checkForUpdates` instead.
	// When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly
	"go.useGoProxyToCheckForToolUpdates": true,

	// Use the Go language server "gopls" from Google for powering language features like code navigation, completion, refactoring, formatting & diagnostics.
	"go.useLanguageServer": true,

	// Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"])
	"go.vetFlags": [],

	// Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	//  - package: vet the current package on file saving
	//  - workspace: vet all the packages in the current workspace root folder on file saving
	//  - off: do not run vet automatically
	"go.vetOnSave": "package",

	// Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
	"gopls": {},

	// Internal feature flag.
	// Maven vulnerability scanning.
	"cloudcode-sourceprotect-pp.maven": true,

	// Internal feature flag.
	// npm vulnerability scanning.
	"cloudcode-sourceprotect-pp.npm": true,

	// Internal feature flag.
	// 
	//  - never: Never show progress indicator while scanning for vulnerabilities.
	//  - startup: Only show progress indicator on first scan for vulnerabilities.
	//  - always: Always show progress indicator while scanning for vulnerabilities.
	"cloudcode-sourceprotect-pp.progress": "startup",

	// Name of the active KubeConfig used by the extension. This name should match the name of a KubeConfig stored in `cloudcode.kubeconfigs`. If a name isn't provided, the default KubeConfig will be used.
	"cloudcode.active-kubeconfig": "",

	// Docker container run settings
	"cloudcode.apigee.dockerOptions": {
		"environmentVariables": {
			"XTERM": "xterm-256color"
		},
		"dns": "8.8.8.8",
		"detached": true,
		"privileged": true,
		"labels": {},
		"volumes": {},
		"additionalArguments": ""
	},

	// List of emulator tags to be enabled in the emulator view
	"cloudcode.apigee.emulators": [
		"1.6.1"
	],

	// Automatically install and update required Cloud Code dependencies such as the [Cloud SDK](https://cloud.google.com/sdk/gcloud), [Skaffold](https://skaffold.dev/), [minikube](https://minikube.sigs.k8s.io/docs/), and [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/). **Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload**.
	"cloudcode.autoDependencies": "on",

	// Internal feature flag
	// Enable the Apigee explorers
	"cloudcode.beta.enableApigeeExplorers": true,

	// Internal feature flag.
	// Enable the AwsLambdaImporter explorer
	"cloudcode.beta.enableAwsLambdaImporter": false,

	// Users should not enable blueprints, this is very experimental
	// Enables Blueprints configuration.
	"cloudcode.beta.enableBlueprints": false,

	// This is no longer a beta feature
	// Enable setting up Build Environments on run/debug/deploy sessions.
	"cloudcode.beta.enableBuildEnvironmentsInit": true,

	// Internal feature flag.
	// Enable the Getting Started with CloudCode page
	"cloudcode.beta.enableGettingStartedPage": false,

	// Internal feature flag.
	// Enable the Google Cloud Functions explorer
	"cloudcode.beta.enableGoogleCloudFunctions": true,

	// Internal feature flag
	// Enable the Collection of Partial HaTS Response
	"cloudcode.beta.enableHatsPartial": true,

	// Internal feature flag.
	// Enable the new One Activity Bar. **Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload**
	"cloudcode.beta.enableOneActivityBar": true,

	// Internal feature flag.
	// Enable showing a notification the first time the new One Activity Bar is enabled.
	"cloudcode.beta.enableOneActivityBarNotification": true,

	// This is no longer a beta feature
	// Enable the new Output Logging for kubernetes run/debug sessions.
	"cloudcode.beta.enableOutputLogging": true,

	// Internal feature flag.
	// Enables the ability to send logs on crashes and failures.
	"cloudcode.beta.enableSendLogs": true,

	// This is no longer a beta feature
	// Enable the new Skaffold modules integration for kubernetes applications.
	"cloudcode.beta.enableSkaffoldModules": true,

	// Internal feature flag.
	// Enable Source Protect
	"cloudcode.beta.enableSourceProtect": false,

	// Internal feature flag
	// Enable the new VM Explorer
	"cloudcode.beta.enableVMExplorer": true,

	// Internal feature flag.
	// Enable submitting deployment logs on Skaffold errors of these types
	"cloudcode.beta.skaffoldSubmitLogsFailureReasons": [
		"unknown_failure"
	],

	// Display Cloud SDK debug information in the 'Cloud Code' output window.
	"cloudcode.cloudSdkVerbosityLevel": "warning",

	// Default project to use in Cloud Shell. If not set, the existing default will be used or you will be prompted to set one. For more information on how to get started with developing in a Cloud Shell environment, view this [quickstart](https://cloud.google.com/code/docs/vscode/quickstart-remote-dev).
	"cloudcode.cloudshell.project": "",

	// List of custom samples in Cloud Code
	"cloudcode.customApplications": [],

	// Provide customizations for the Cloud Code debuggers.
	"cloudcode.debug-kubernetes": {},

	// Internal feature flag.
	// Enable buildpacks.
	"cloudcode.enableBuildpacks": true,

	// Enable the experimental config-less run/debug experience for Kubernetes and Cloud Run apps.
	"cloudcode.enableConfigLessExperience": false,

	// Internal feature flag.
	// Enable reporting unexpected Cloud Code crashes to Google
	"cloudcode.enableCrashReporting": true,

	// Internal feature flag
	// Enable Custom Sample Application Support
	"cloudcode.enableCustomApplications": true,

	// Internal feature flag.
	// Enable the new deploy and debug flows.
	"cloudcode.enableDeployDebugV2": true,

	// Internal feature flag.
	// Enable the experimental deployment wizard that streamlines the deployment for existing kubernetes applications.
	"cloudcode.enableExperimentalDeploymentWizard": true,

	// Enable deployment support for GKE-Autopilot clusters
	"cloudcode.enableGkeAutopilotSupport": true,

	// Enable the [minikube gcp-auth plugin](https://minikube.sigs.k8s.io/docs/handbook/addons/gcp-auth/) when starting a Cloud Code run or debug session that is deploying to minikube.
	"cloudcode.enableMinikubeGcpAuthPlugin": true,

	// Enable support for multiple skaffold configurations.
	"cloudcode.enableMultiSkaffoldConfigsKey": false,

	// Enable the new welcome experience.
	"cloudcode.enableNewWelcomePage": true,

	// Enable sending usage data to Google. Data collected is subject to the [Google Privacy Policy](https://policies.google.com/privacy).
	"cloudcode.enableTelemetry": true,

	// List of KubeConfig files that can be used in the Kubernetes Explorer. Switch between the default KubeConfig and KubeConfigs listed here with the `cloudcode.active-kubeconfig` setting.
	"cloudcode.kubeconfigs": [],

	// The shell to use when choosing 'Get Terminal' on a Pod in the Clusters Explorer. Commonly used choices include `sh` or `bash`.
	"cloudcode.kubectlExecShell": "sh",

	// The length of time to wait before giving up on a single kubectl server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.
	"cloudcode.kubectlRequestTimeout": "5s",

	// Display minikube status in the status bar.
	"cloudcode.minikubeStatusBar": true,

	// Branch to checkout from Google-maintained code sample repositories.
	"cloudcode.samplesBranch": "v1",

	// Internal feature flag.
	// Enable displaying welcome and release notes on first use of cloud code and subsequent updates.
	"cloudcode.showWelcomeOrReleaseNotes": true,

	// Append a `—-update-adc` flag to `gcloud auth login`. [Read about this flag](https://cloud.google.com/sdk/gcloud/reference/auth/login#--update-adc).
	"cloudcode.updateAdcOnLogin": true,

	// Automatically install the insiders version of Cloud Code by changing this value to 'Insiders', or set the value as 'Default' to use the stable released version from the marketplace. [Learn more about Insiders builds](https://cloud.google.com/code/docs/vscode/insiders).
	"cloudcode.updateChannel": "",

	// Display extension debug information in the 'Cloud Code' output window.
	"cloudcode.verboseLogging": false,

	// Enable resource completions from the active cluster. This setting may impact completion performance.
	"cloudcode.yaml.clusterResourceCompletion": true,

	// Enable YAML code completion.
	"cloudcode.yaml.completion": true,

	// Array of locations pointing to Kubernetes CRD schema. Each of these can be set to a local path (example: `/files/crd.yaml`) or URL (example: `http://github.com/user/repo/crd.yaml`).
	"cloudcode.yaml.crdSchemaLocations": [],

	// Custom tags the parser should recognize and validate against.
	"cloudcode.yaml.customTags": [],

	// Enable Kubernetes YAML editing support.
	"cloudcode.yaml.enableKubernetesSupport": true,

	// Enable Migrate for Anthos YAML editing support.
	"cloudcode.yaml.enableMigrateForAnthosSupport": true,

	// Print spaces between brackets in objects.
	"cloudcode.yaml.format.bracketSpacing": true,

	// Enable default YAML formatter. **Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload**
	"cloudcode.yaml.format.enable": false,

	// Choose when to automatically wrap prose.
	//  - preserve: Wrap prose; if it exceeds print-width.
	//  - never: Never wrap; keep prose on the same line.
	//  - always: Keep prose as-is.
	"cloudcode.yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes.
	"cloudcode.yaml.format.singleQuote": false,

	// Enable hover feature.
	"cloudcode.yaml.hover": true,

	// Select the Kubernetes version Cloud Code should utilize when providing YAML editing support.
	"cloudcode.yaml.kubernetesVersion": "v1.25.0",

	// Associate schemas to YAML files in the current workspace.
	"cloudcode.yaml.schemas": {},

	// Trace the communication between VSCode and the language server in an output window.
	"cloudcode.yaml.trace.server": "off",

	// Enable validation feature.
	"cloudcode.yaml.validate": true,

	// Glob pattern matching YAML files in the workspace. YAML editing support such as completion, inline definitions, and linting would be available for this file type. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"cloudcode.yaml.yamlFileMatcher": "**/*.yaml",

	// Add menu items to the editor context menu for running and debugging the tests in the current file
	"testExplorer.addToEditorContextMenu": false,

	// Show a CodeLens above each test or suite for running or debugging the tests
	"testExplorer.codeLens": true,

	// Show error messages from test failures as decorations in the editor
	"testExplorer.errorDecoration": true,

	// Provide hover messages for the error decorations in the editor
	"testExplorer.errorDecorationHover": true,

	// Show the state of each test in the editor using Gutter Decorations
	"testExplorer.gutterDecoration": true,

	// Hide the output channel used to show a test's log when the user clicks on a test whose log is empty
	"testExplorer.hideEmptyLog": true,

	// Hide the Test Explorer when no test adapters have been registered or when no tests have been found
	"testExplorer.hideWhen": "never",

	// Merge suites with the same label and parent
	"testExplorer.mergeSuites": false,

	// Retire or reset all test states whenever the test tree is reloaded
	//  - retire: Retire all test states whenever the test tree is reloaded
	//  - reset: Reset all test states whenever the test tree is reloaded
	//  - null: Don't change the test states when the test tree is reloaded
	"testExplorer.onReload": null,

	// Retire or reset all test states whenever a test run is started
	//  - retire: Retire all test states whenever a test run is started
	//  - reset: Reset all test states whenever a test run is started
	//  - null: Don't change the test states when a test run is started
	"testExplorer.onStart": null,

	// Show a button for collapsing the nodes of the test tree
	"testExplorer.showCollapseButton": true,

	// Show a button for expanding the top nodes of the test tree, recursively for the given number of levels
	"testExplorer.showExpandButton": 3,

	// Switch to the Test Explorer view whenever a test run is started
	"testExplorer.showOnRun": false,

	// Sort the tests and suites by label or location. If this is not set (or set to null), they will be shown in the order that they were received from the adapter
	//  - byLabel: sort by label
	//  - byLocation: sort by location (filename and line), if multiple tests or suites appear at the same location, they are sorted by label
	//  - byLabelWithSuitesFirst: sort by label, but always put the suites on top
	//  - byLocationWithSuitesFirst: sort by location, but always put the suites on top
	//  - null: don't sort, the tests and suites will be shown in the order that they were received from the adapter
	"testExplorer.sort": null,

	// Disable the Test Explorer UI and use VSCode's native Testing UI instead
	"testExplorer.useNativeTesting": false,

	// The associated document types to be linted.
	"htmlhint.documentSelector": [
		"html",
		"htm"
	],

	// Control whether HTMLHint is enabled for HTML files or not.
	"htmlhint.enable": true,

	// The HTMLHint options object to provide args to the HTMLHint command.
	"htmlhint.options": {},

	// Relative path to node_modules folder.
	"search-node-modules.path": "node_modules",

	// Default to folder of last opened file when searching.
	"search-node-modules.useLastFolder": false,

	// 
	//  - Active: Open in the active pane
	//  - Beside: Open in the pane beside the active one
	//  - One: Open in the first pane
	//  - Two: Open in the second pane
	//  - Three: Open in the third pane
	//  - Four: Open in the fourth pane
	//  - Five: Open in the fifth pane
	//  - Six: Open in the sixth pane
	//  - Seven: Open in the seventh pane
	//  - Eight: Open in the eighth pane
	//  - Nine: Open in the ninth pane
	"liveFrame.pane": "Beside",

	// Title to display in the Live Frame tab
	"liveFrame.title": null,

	// URL to open in the Live Frame
	"liveFrame.url": null,

	// When creating a hanging indent, do not put the closing bracket on its own line.
	"pythonIndent.keepHangingBracketOnLine": false,

	// Trims lines that contain only whitespace after pressing Enter on them.
	"pythonIndent.trimLinesWithOnlyWhitespace": false,

	// After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
	"pythonIndent.useTabOnHangingIndent": false,

	// Enables line decoration for Kite code finder.
	"kite.codefinder.enableLineDecoration": false,

	// Array of file extensions for which Kite will not provide completions, e.g. ['.go', '.ts']. Requires restart of VSCode.
	"kite.completions.disabledFileExtensions": [],

	// Displays JSON data used by a view and also updates sample.html with the last rendered HTML.
	"kite.developerMode": false,

	// For JavaScript and Go: Enabling this will cause Kite to trigger completions after a space, ( and [. Note that this may cause completions from other providers to not show up.
	"kite.enableOptionalCompletionsTriggers": false,

	// Enable snippet completions
	"kite.enableSnippets": true,

	// The verbosity level of Kite's logs.
	"kite.loggingLevel": "info",

	// Interval in milliseconds at which the Kite extension polls Kite Engine to get the status of the current file.
	"kite.pollingInterval": 5000,

	// Whether or not to show the Kite welcome notification on startup.
	"kite.showWelcomeNotificationOnStartup": true,

	// Automatically start Kite Engine on editor startup if it's not already running.
	"kite.startKiteEngineOnStartup": true,

	// Custom command that supports jq command line options.
	// 
	//  `$$user_filter` is replaced with the filter you typed
	// 
	//  `$$file_path` is replaced with the current file path
	"jq.customCommand": "jq '$$user_filter' $$file_path",

	// By default, this extension only works with files with a `json` file identifier. Turn this off if you want to use it everywhere.
	"jq.strictMode": true,

	// Auto strip module extensions
	"node-module-intellisense.autoStripExtensions": [
		".js",
		".jsx",
		".ts",
		".d.ts",
		".tsx"
	],

	// Module Paths to scan. Use ${workspaceRoot} for workspace lookup.
	"node-module-intellisense.modulePaths": [],

	// Scans builtin modules as well
	"node-module-intellisense.scanBuiltinModules": true,

	// Scans devDependencies as well
	"node-module-intellisense.scanDevDependencies": true,

	// Scans file modules as well
	"node-module-intellisense.scanFileModules": true,

	// Test framework to use for Python Test Explorer (default is null and Python extension settings are used)
	"pythonTestExplorer.testFramework": null,

	// Arguments passed in. Each argument is a separate item in the array.
	"pythonTestExplorer.testplanArgs": [],

	// Enable testing using Testplan. Note that Testplan is only supported for Python 3.7+.
	"pythonTestExplorer.testplanEnabled": false,

	// Relative path to testplan main suite.
	"pythonTestExplorer.testplanPath": "test_plan.py",

	// Specifies the executable path for vim. Note to run terminal if you use CUI version of vim.
	"openvim.executablePath": null,

	// code coverage with istanbul 
	"mocha.coverage": {
		"enable": true,
		"decoration": true,
		"runWithInterval": false,
		"autoUpdateInterval": 20000,
		"activeOnStart": true,
		"runAfterTest": false,
		"runCoverageAfterFileSave": false,
		"reporters": []
	},

	// set debug name
	"mocha.debugSettingsName": "",

	// Mocha: mocha package path then the sideBar installed one for example ../node_modules/mocha
	"mocha.logVerbose": true,

	// Mocha: Options to pass to node executable
	"mocha.node_options": [],

	// nyc path config for coverage
	"mocha.nycPath": "",

	// Mocha: number of tests to run in parallel
	"mocha.parallelTests": 5,

	// Mocha: set other mocha path then the built-in one for example ../node_modules/mocha (only path to the package)
	"mocha.path": "",

	// Array of module required to run Mocha. (for example babel-register, coffee-script/register or ts-node/register)
	"mocha.requires": [],

	// Mocha: run tests on each save
	"mocha.runTestsOnSave": "false",

	// Show popup when having any error while executing test
	"mocha.showErrorPopup": "true",

	// Show in explorer view or in test view(new feature since version 1.23)
	"mocha.showInExplorer": false,

	// Mocha: this option allows you to enable/disable lens and decorations and set update threshold.
	"mocha.sideBarOptions": {
		"lens": true,
		"decoration": true,
		"autoUpdateTime": 2000,
		"showDebugTestStatus": true
	},

	// Sets a subdirectory as the root for mocha-sidebar
	"mocha.subdirectory": "",

	// Command templates for `docker attach` / `docker exec -it` commands.
	"docker.commands.attach": "${containerCommand} exec -it ${containerId} ${shellCommand}",

	// Command template(s) for `docker build` commands.
	"docker.commands.build": "${containerCommand} build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

	// Command templates for `docker-compose down` commands.
	"docker.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "${composeCommand} ${configurationFile} down"
		}
	],

	// Command templates for `docker-compose up` commands.
	"docker.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "${composeCommand} ${configurationFile} up ${detached} ${build}"
		}
	],

	// Command templates for `docker-compose up <subset>` commands.
	"docker.commands.composeUpSubset": [
		{
			"label": "Compose Up",
			"template": "${composeCommand} ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}"
		}
	],

	// Command templates for `docker logs` commands.
	"docker.commands.logs": "${containerCommand} logs --tail 1000 -f ${containerId}",

	// Command templates for `docker run` commands.
	"docker.commands.run": "${containerCommand} run --rm -d ${exposedPorts} ${tag}",

	// Command templates for `docker run -it` (interactive) commands.
	"docker.commands.runInteractive": "${containerCommand} run --rm -it ${exposedPorts} ${tag}",

	// Command to use for Docker Compose actions (e.g. `docker-compose`, `docker compose`, etc.). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.
	"docker.composeCommand": "",

	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
	"docker.containers.description": [
		"ContainerName",
		"Status"
	],

	// The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
	"docker.containers.groupBy": "Compose Project Name",

	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
	"docker.containers.label": "FullTag",

	// The property to use to sort containers in Docker view: CreatedTime or Label
	"docker.containers.sortBy": "CreatedTime",

	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"docker.contexts.description": [
		"Description"
	],

	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"docker.contexts.label": "Name",

	// Set to true to include --build option when docker-compose command is invoked
	"docker.dockerComposeBuild": true,

	// Set to true to include --d (detached) option when docker-compose command is invoked
	"docker.dockerComposeDetached": true,

	// Absolute path to Docker client executable (`docker` command). If the path contains whitespace, it needs to be quoted appropriately.
	"docker.dockerPath": "",

	// Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
	"docker.enableDockerComposeLanguageService": true,

	// Environment variables that will be applied to all VS Code terminals and to all background processes started by the Docker extension. Use for variables like `DOCKER_HOST`, etc.
	"docker.environment": {},

	// Build context PATH to pass to Docker build command.
	"docker.imageBuildContextPath": "",

	// Check for outdated base images once per Visual Studio Code session
	"docker.images.checkForOutdatedImages": true,

	// Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
	"docker.images.description": [
		"CreatedTime"
	],

	// The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
	"docker.images.groupBy": "Repository",

	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
	"docker.images.label": "Tag",

	// The property to use to sort images in Docker view: CreatedTime, Label, or Size
	"docker.images.sortBy": "CreatedTime",

	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",

	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",

	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

	// Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
	"docker.languageserver.formatter.ignoreMultilineInstructions": false,

	// Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"docker.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],

	// The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"docker.networks.groupBy": "None",

	// The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"docker.networks.label": "NetworkName",

	// Show the built-in networks in the explorer.
	"docker.networks.showBuiltInNetworks": true,

	// The property to use to sort networks in Docker view: CreatedTime or Label
	"docker.networks.sortBy": "CreatedTime",

	// Prompt for registry selection if the image is not explicitly tagged.
	"docker.promptForRegistryWhenPushingImages": true,

	// The path to use for scaffolding templates.
	"docker.scaffolding.templatePath": "",

	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"docker.showRemoteWorkspaceWarning": true,

	// Set to true to truncate long image and container registry paths in Docker view
	"docker.truncateLongRegistryPaths": false,

	// Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"docker.truncateMaxLength": 10,

	// Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
	"docker.volumes.description": [
		"CreatedTime"
	],

	// The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
	"docker.volumes.groupBy": "None",

	// The primary property to display for a Docker volume: CreatedTime or VolumeName
	"docker.volumes.label": "VolumeName",

	// The property to use to sort volumes in Docker view: CreatedTime or Label
	"docker.volumes.sortBy": "CreatedTime",

	// Kubernetes configuration
	"vs-kubernetes": {
		"vs-kubernetes.namespace": "",
		"vs-kubernetes.kubectl-path": "",
		"vs-kubernetes.helm-path": "",
		"vs-kubernetes.minikube-path": "",
		"vs-kubernetes.kubectlVersioning": "user-provided",
		"vs-kubernetes.outputFormat": "yaml",
		"vs-kubernetes.kubeconfig": "",
		"vs-kubernetes.knownKubeconfigs": [],
		"vs-kubernetes.autoCleanupOnDebugTerminate": false,
		"vs-kubernetes.nodejs-autodetect-remote-root": true,
		"vs-kubernetes.nodejs-remote-root": "",
		"vs-kubernetes.nodejs-debug-port": 9229,
		"vs-kubernetes.dotnet-vsdbg-path": "~/vsdbg/vsdbg",
		"vs-kubernetes.local-tunnel-debug-provider": "",
		"checkForMinikubeUpgrade": true,
		"imageBuildTool": "Docker"
	},

	// File path to a helm binary. (You can override this on a per-OS basis if required).
	"vscode-kubernetes.helm-path": "",

	// File path to a helm binary.
	"vscode-kubernetes.helm-path.linux": "",

	// File path to a helm binary.
	"vscode-kubernetes.helm-path.mac": "",

	// File path to a helm binary.
	"vscode-kubernetes.helm-path.windows": "",

	// File path to a kubectl binary. (You can override this on a per-OS basis if required).
	"vscode-kubernetes.kubectl-path": "",

	// File path to a kubectl binary.
	"vscode-kubernetes.kubectl-path.linux": "",

	// File path to a kubectl binary.
	"vscode-kubernetes.kubectl-path.mac": "",

	// File path to a kubectl binary.
	"vscode-kubernetes.kubectl-path.windows": "",

	// Set to true to automatically begin fetching logs once the log viewer is opened using the default settings.
	"vscode-kubernetes.log-viewer.autorun": false,

	// Where to display logs, defaults to the dedicated Webview.
	"vscode-kubernetes.log-viewer.destination": "Webview",

	// Set to true to follow logs by default in the log viewer.
	"vscode-kubernetes.log-viewer.follow": false,

	// How far back to fetch logs from in seconds by default. Set to -1 for all logs.
	"vscode-kubernetes.log-viewer.since": -1,

	// The number of recent logs to display by default in the log viewer. Set to -1 for all log lines.
	"vscode-kubernetes.log-viewer.tail": -1,

	// Set to true to show timestamps by default in the log viewer.
	"vscode-kubernetes.log-viewer.timestamp": false,

	// Set to true to wrap lines by default in the log viewer.
	"vscode-kubernetes.log-viewer.wrap": false,

	// File path to a minikube binary. (You can override this on a per-OS basis if required).
	"vscode-kubernetes.minikube-path": "",

	// File path to a minikube binary.
	"vscode-kubernetes.minikube-path.linux": "",

	// File path to a minikube binary.
	"vscode-kubernetes.minikube-path.mac": "",

	// File path to a minikube binary.
	"vscode-kubernetes.minikube-path.windows": "",

	// Image prefix for docker images ie 'docker.io/brendanburns'
	"vsdocker.imageUser": null,

	// List of projects in the workspace to exclude from the projects viewlet
	"dataworkspace.excludedProjects": [],

	// Full path to folder where new projects are saved by default.
	"projects.defaultProjectSaveLocation": "",

	// Always show information message when the current workspace folders contain projects that have not been added to the workspace's projects.
	"projects.showNotAddedProjectsInWorkspacePrompt": true,

	// [Optional] Configuration options for localizing into VSCode's configured locale (must restart VSCode for settings to take effect)
	"mssql.applyLocalization": false,

	// Chooses which Authentication method to use
	//  - AuthCodeGrant: Prompts users to sign in using their browser.
	//  - DeviceCode: Allows users to sign in to input-constrained devices.
	"mssql.azureActiveDirectory": "AuthCodeGrant",

	// Connection profiles defined in 'User Settings' are shown under 'MS SQL: Connect' command in the command palette.
	"mssql.connections": [],

	// [Optional] Configuration options for copying results from the Results View
	"mssql.copyIncludeHeaders": false,

	// [Optional] Configuration options for copying multi-line results from the Results View
	"mssql.copyRemoveNewLine": true,

	// Enable Query History Capture
	"mssql.enableQueryHistoryCapture": true,

	// Should Query History feature be enabled
	"mssql.enableQueryHistoryFeature": true,

	// Should column definitions be aligned?
	"mssql.format.alignColumnDefinitionsInColumns": false,

	// Should data types be formatted as UPPERCASE, lowercase, or none (not formatted)
	"mssql.format.datatypeCasing": "none",

	// Should keywords be formatted as UPPERCASE, lowercase, or none (not formatted)
	"mssql.format.keywordCasing": "none",

	// should commas be placed at the beginning of each statement in a list e.g. ', mycolumn2' instead of at the end e.g. 'mycolumn1,'
	"mssql.format.placeCommasBeforeNextStatement": false,

	// Should references to objects in a select statements be split into separate lines? E.g. for 'SELECT C1, C2 FROM T1' both C1 and C2 will be on separate lines
	"mssql.format.placeSelectStatementReferencesOnNewLine": false,

	// [Optional] Do not show unsupported platform warnings
	"mssql.ignorePlatformWarning": false,

	// Should IntelliSense error checking be enabled
	"mssql.intelliSense.enableErrorChecking": true,

	// Should IntelliSense be enabled
	"mssql.intelliSense.enableIntelliSense": true,

	// Should IntelliSense quick info be enabled
	"mssql.intelliSense.enableQuickInfo": true,

	// Should IntelliSense suggestions be enabled
	"mssql.intelliSense.enableSuggestions": true,

	// Should IntelliSense suggestions be lowercase
	"mssql.intelliSense.lowerCaseSuggestions": false,

	// [Optional] Log debug output to the VS Code console (Help -> Toggle Developer Tools)
	"mssql.logDebugInfo": false,

	// Maximum number of old files to remove upon startup that have expired mssql.logRetentionMinutes. Files that do not get cleaned up due to this limitation get cleaned up next time Azure Data Studio starts up.
	"mssql.logFilesRemovalLimit": 100,

	// Number of minutes to retain log files for backend services. Default is 1 week.
	"mssql.logRetentionMinutes": 10080,

	// The maximum number of recently used connections to store in the connection list.
	"mssql.maxRecentConnections": 5,

	// True for the messages pane to be open by default; false for closed
	"mssql.messagesDefaultOpen": true,

	// Should query result selections and scroll positions be saved when switching tabs (may impact performance)
	"mssql.persistQueryResultTabs": false,

	// Enable Parameterization for Always Encrypted
	"mssql.query.alwaysEncryptedParameterization": false,

	// Enable SET ANSI_DEFAULTS
	"mssql.query.ansiDefaults": false,

	// Enable SET ANSI_NULL_DFLT_ON
	"mssql.query.ansiNullDefaultOn": true,

	// Enable SET ANSI_NULLS
	"mssql.query.ansiNulls": true,

	// Enable SET ANSI_PADDING
	"mssql.query.ansiPadding": true,

	// Enable SET ANSI_WARNINGS
	"mssql.query.ansiWarnings": true,

	// Enable SET ARITHABORT option
	"mssql.query.arithAbort": true,

	// Enable SET CURSOR_CLOSE_ON_COMMIT
	"mssql.query.cursorCloseOnCommit": false,

	// Enable SET DEADLOCK_PRIORITY option
	"mssql.query.deadlockPriority": "Normal",

	// Should BIT columns be displayed as numbers (1 or 0)? If false, BIT columns will be displayed as 'true' or 'false'
	"mssql.query.displayBitAsNumber": true,

	// An execution time-out of 0 indicates an unlimited wait (no time-out)
	"mssql.query.executionTimeout": 0,

	// Enable SET IMPLICIT_TRANSACTIONS
	"mssql.query.implicitTransactions": false,

	// Enable SET LOCK TIMEOUT option (in milliseconds)
	"mssql.query.lockTimeout": -1,

	// Number of XML characters to store after running a query
	"mssql.query.maxXmlCharsToStore": 2097152,

	// Enable SET NOCOUNT option
	"mssql.query.noCount": false,

	// Enable SET NOEXEC option
	"mssql.query.noExec": false,

	// Enable SET PARSEONLY option
	"mssql.query.parseOnly": false,

	// Enable SET QUERY_GOVERNOR_COST_LIMIT
	"mssql.query.queryGovernorCostLimit": -1,

	// Enable SET QUOTED_IDENTIFIER
	"mssql.query.quotedIdentifier": true,

	// Maximum number of rows to return before the server stops processing your query.
	"mssql.query.rowCount": 0,

	// Enable SET STATISTICS IO option
	"mssql.query.statisticsIO": false,

	// Enable SET STATISTICS TIME option
	"mssql.query.statisticsTime": false,

	// Maximum size of text and ntext data returned from a SELECT statement
	"mssql.query.textSize": 2147483647,

	// Enable SET TRANSACTION ISOLATION LEVEL option
	"mssql.query.transactionIsolationLevel": "READ COMMITTED",

	// Enable SET XACT_ABORT ON option
	"mssql.query.xactAbortOn": false,

	// Number of query history entries to show in the Query History view
	"mssql.queryHistoryLimit": 20,

	// Set the font family for the results grid; set to blank to use the editor font
	"mssql.resultsFontFamily": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",

	// Set the font size for the results grid; set to blank to use the editor size
	"mssql.resultsFontSize": 13,

	// [Optional] Delimiter for separating data items when saving results as CSV
	"mssql.saveAsCsv.delimiter": ",",

	// [Optional] File encoding used when saving results as CSV
	"mssql.saveAsCsv.encoding": "utf-8",

	// [Optional] When true, column headers are included when saving results as CSV
	"mssql.saveAsCsv.includeHeaders": true,

	// [Optional] Character(s) used for separating rows when saving results as CSV
	"mssql.saveAsCsv.lineSeparator": null,

	// [Optional] Character used for enclosing text fields when saving results as CSV
	"mssql.saveAsCsv.textIdentifier": "\"",

	// Shortcuts related to the results window
	"mssql.shortcuts": {
		"_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
		"event.toggleResultPane": "ctrl+alt+R",
		"event.focusResultsGrid": "ctrl+alt+G",
		"event.toggleMessagePane": "ctrl+alt+Y",
		"event.prevGrid": "ctrl+up",
		"event.nextGrid": "ctrl+down",
		"event.copySelection": "ctrl+C",
		"event.copyWithHeaders": "",
		"event.copyAllHeaders": "",
		"event.maximizeGrid": "",
		"event.selectAll": "ctrl+A",
		"event.saveAsJSON": "",
		"event.saveAsCSV": "",
		"event.saveAsExcel": ""
	},

	// [Optional] Should execution time be shown for individual batches
	"mssql.showBatchTime": false,

	// [Optional] Configuration options for which column new result panes should open in
	"mssql.splitPaneSelection": "next",

	// [Optional] Log level for backend services. Azure Data Studio generates a file name every time it starts and if the file already exists the logs entries are appended to that file. For cleanup of old log files see logRetentionMinutes and logFilesRemovalLimit settings. The default tracingLevel does not log much. Changing verbosity could lead to extensive logging and disk space requirements for the logs. Error includes Critical, Warning includes Error, Information includes Warning and Verbose includes Information
	"mssql.tracingLevel": "Critical",

	// Which version of Autorest.Sql to use from NPM.  Latest will be used if not set.
	"sqlDatabaseProjects.autorestSqlVersion": "",

	// Whether project nodes start collapsed
	"sqlDatabaseProjects.collapseProjectNodes": false,

	// Full path to .NET SDK on the machine.
	"sqlDatabaseProjects.dotnetSDK Location": "",

	// Whether to prompt the user to install .NET Core when not detected.
	"sqlDatabaseProjects.netCoreDoNotAsk": false,

	// Whether to prompt the user to install Node.js when not detected.
	"sqlDatabaseProjects.nodejsDoNotAsk": false,

	// Arguments passed in. Each argument is a separate string in the array.
	"isort.args": [],

	// Controls whether to run `isort` and report import sort issues.
	"isort.check": false,

	// Defines where `isort` is imported from. This setting may be ignored if `isort.path` is set.
	//  - useBundled: Always use the bundled version of `isort`.
	//  - fromEnvironment: Use `isort` from environment, fallback to bundled version only if `isort` not available in the environment.
	"isort.importStrategy": "useBundled",

	// When set to a path to python executable, extension will use that to launch the server and any subprocess.
	"isort.interpreter": [],

	// The trace level the extension logs at, defaults to 'error'.
	//  - debug: Includes verbose logging intended for debugging purposes.
	//  - error: Only errors and always logged information.
	//  - info: Includes all messages that are not marked as verbose or debug.
	//  - off: Most logging is turned off, any information that is always logged might still be shown.
	//  - warn: Includes all messages in the error category and any additional warnings.
	"isort.logLevel": "error",

	// When set to a path to `isort` binary, extension will use that for linting. NOTE: Using this option may slowdown linting.
	"isort.path": [],

	// Mapping from severity of `isort` message type to severity shown in problem window.
	"isort.severity": {
		"W": "Warning",
		"E": "Hint"
	},

	// Controls when notifications are shown by this extension.
	//  - off: All notifications are turned off, any errors or warning are still available in the logs.
	//  - onError: Notifications are shown only in the case of an error.
	//  - onWarning: Notifications are shown for errors and warnings.
	//  - always: Notifications are show for anything that the server chooses to show.
	"isort.showNotifications": "off",

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See https://aka.ms/AAfekmf to understand when this is used
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Controls when to display information of selected interpreter in the status bar.
	//  - never: Never display information.
	//  - onPythonRelated: Only display information if Python-related files are opened.
	//  - always: Always display information.
	"python.interpreter.infoVisibility": "onPythonRelated",

	// Defines type of the language server.
	//  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
	//  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
	//  - Pylance: Use Pylance as a language server.
	//  - None: Disable language server capabilities.
	"python.languageServer": "Default",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8.
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// %python.linting.mypyCategorySeverity.note.description%.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle.
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle.
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Error/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": false,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// This setting will be removed soon. Use `isort.args` instead.
	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// This setting will be removed soon. Use `isort.path` instead.
	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// When launching a python terminal, whether to focus the cursor on the terminal.
	"python.terminal.focusAfterLaunch": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": false,

	// Offer user symbols in auto-import completions.
	"python.analysis.autoImportUserSymbols": false,

	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,

	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,

	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},

	// Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
	"python.analysis.exclude": [],

	// Allow using '.', '(' as commit characters when applicable.
	"python.analysis.extraCommitChars": true,

	// Additional import search resolution paths
	"python.analysis.extraPaths": [],

	// source fixes to run in fix all.
	"python.analysis.fixAll": [],

	// Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
	"python.analysis.ignore": [],

	// Defines the default format for import module.
	//  - absolute: Use absolute import format when creating new import statement.
	//  - relative: Use relative import format when creating new import statement.
	"python.analysis.importFormat": "absolute",

	// Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
	"python.analysis.include": [],

	// Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
	"python.analysis.indexing": true,

	// Enable/disable inlay hints for function return types:
	// ```python
	// def foo(x:int) ' -> int ':
	// 	return x
	// ```
	// 
	"python.analysis.inlayHints.functionReturnTypes": false,

	// Enable/disable inlay hints for variable types:
	// ```python
	// foo ' :list[str] ' = ["a"]
	//  
	// ```
	// 
	"python.analysis.inlayHints.variableTypes": false,

	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",

	// Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:
	// ```JSON
	// {"name": "package name (str)",
	//  "depth": "depth to scan (int)",
	//  "includeAllSymbols": "whether to include all symbols (bool)"}
	// 
	// ```
	// If `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.  
	//   
	// Usage example: 
	// ```JSON
	// [
	// 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
	// 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
	// ]
	// 
	// ```
	// 
	"python.analysis.packageIndexDepths": [
		{
			"name": "sklearn",
			"depth": 2
		},
		{
			"name": "matplotlib",
			"depth": 2
		},
		{
			"name": "scipy",
			"depth": 2
		},
		{
			"name": "django",
			"depth": 2
		}
	],

	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",

	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,

	// After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
	"jupyter.addGotoCodeLenses": true,

	// This setting is deprecated and will be removed in the next release.
	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"jupyter.allowImportFromNotebook": true,

	// This setting is deprecated and will be removed in the next release.
	// Allow the inputting of python code directly into the Interactive window
	"jupyter.allowInput": true,

	// This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter Extension.
	// Allow the Interactive window to be shared during a Live Share session
	"jupyter.allowLiveShare": true,

	// Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// This setting is obsolete. Use the 'interactiveWindow.alwaysScrollOnNewCell' setting instead.
	// Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
	"jupyter.alwaysScrollOnNewCell": false,

	// Warn the user before restarting a kernel.
	"jupyter.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"jupyter.askForLargeDataFrames": true,

	// Set of commands to put as code lens above a cell.
	"jupyter.codeLenses": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell.
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// This setting has been deprecated, please use `interactiveWindow.collapseCellInputCode` instead.
	// Collapse cell input code by default.
	"jupyter.collapseCellInputCodeByDefault": true,

	// This setting is deprecated and will be removed in an upcoming release.
	// Whether or not to use the theme's peek color as the background for the input box.
	"jupyter.colorizeInputBox": true,

	// Set of debug commands to put as code lens above a cell while debugging.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// When debugging, only step through user-written code. Disable this to allow stepping into library code.
	"jupyter.debugJustMyCode": true,

	// Path to debugpy bits for debugging cells.
	"jupyter.debugpyDistPath": "",

	// Draw a highlight behind the currently active cell.
	"jupyter.decorateCells": true,

	// Cell marker used for delineating a cell in a python file.
	"jupyter.defaultCellMarker": "# %%",

	// When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
	"jupyter.disableJupyterAutoStart": false,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"jupyter.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"jupyter.enableCellCodeLens": true,

	// Enables Jedi support for extended IntelliSense completions in running Jupyter kernels (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
	"jupyter.enableExtendedKernelCompletions": false,

	// This setting has been deprecated as Jupyter keyboard shortcuts have been moved into the ms-toolsai.jupyter-keymap extension. If you would like to disable Jupyter keyboard shortcuts, please uninstall or disable that extension instead.
	// Enables Jupyter style keyboard shortcuts for Notebooks.
	"jupyter.enableKeyboardShortcuts": true,

	// This setting is deprecated and will be removed in the next release.
	// Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
	"jupyter.enableScrollingForCellOutputs": true,

	// Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.
	"jupyter.excludeUserSitePackages": false,

	// Enables/disables A/B tests.
	"jupyter.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"jupyter.exportWithOutputEnabled": false,

	// Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
	"jupyter.generateSVGPlots": false,

	// This setting is deprecated and will be removed in the next release.
	// Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"jupyter.ignoreVscodeTheme": false,

	// Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
	"jupyter.interactiveWindowMode": "multiple",

	// Where to open an Interactive Window that is not associated with a python file. 'beside' will open the interactive window to the right of the active editor. 'active' will open the interactive window in place of the active editor. 'secondGroup' will open the interactive window in the second editor group.
	"jupyter.interactiveWindowViewColumn": "secondGroup",

	// When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
	"jupyter.jupyterCommandLineArguments": [],

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"jupyter.jupyterLaunchTimeout": 60000,

	// List of Jupyter Kernels and/or Python environments that are to be excluded from the Kernel picker.
	"jupyter.kernels.filter": [],

	// Enter fully qualified paths to Kernel specification files that are to be trusted. E.g. 'C:\Program Data\Jupyter\kernels\python3\kernel.json'.  
	// **Note**: Kernels can execute code with user privileges. Click [here](https://aka.ms/JupyterTrustedKernelPaths) for further details.
	"jupyter.kernels.trusted": [],

	// This setting is deprecated and will be removed in the next release.
	// Amount of time to wait for guest connections to verify they have the Python Extension installed.
	"jupyter.liveShareConnectionTimeout": 1000,

	// The logging level the extension logs at.
	"jupyter.logging.level": "debug",

	// Creates separate output panels for kernels/jupyter server console output
	"jupyter.logKernelOutputSeparately": false,

	// Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
	"jupyter.magicCommandsAsComments": false,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// This setting is deprecated and will be removed in the next release.
	// Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
	"jupyter.maxOutputSize": 400,

	// Append a new empty cell to an interactive window file on running the currently last cell.
	"jupyter.newCellOnRunLast": true,

	// Set the root directory for running notebooks and the Interactive window.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// Enable folding regions for code cells in Python files. This setting requires a reload of VS Code.
	"jupyter.pythonCellFolding": true,

	// Characters which trigger auto completion on a python jupyter kernel.
	"jupyter.pythonCompletionTriggerCharacters": ".%'\"",

	// The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
	"jupyter.pythonExportMethod": "direct",

	// When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
	"jupyter.remoteDebuggerPort": -1,

	// A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
	"jupyter.runStartupCommands": "",

	// This setting is deprecated and will be removed in the next release.
	// Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
	"jupyter.searchForJupyter": true,

	// When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
	"jupyter.sendSelectionToInteractiveWindow": false,

	// This setting is deprecated and will be removed in the next release.
	// Show cell input code.
	"jupyter.showCellInputCode": true,

	// Show the Outline button in the Jupyter notebook toolbar.
	"jupyter.showOutlineButtonInNotebookToolbar": true,

	// Bring up the Variable View when starting a Run by Line session.
	"jupyter.showVariableViewWhenDebugging": false,

	// Stop running cells if a cell throws an exception.
	"jupyter.stopOnError": true,

	// When debugging a cell, stop on the first line.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
	// Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
	"jupyter.textOutputLimit": 20000,

	// In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
	"jupyter.themeMatplotlibPlots": false,

	// When running Jupyter locally, create a default empty Jupyter config for the Interactive window
	"jupyter.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Interactive variable explorer
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

	// Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example:
	// ```
	// [
	//   {
	//     "language": "python",
	//     "query": "%who_ls",
	//     "parseExpr": "'(\\w+)'"
	//   }
	// ]
	// ```
	"jupyter.variableQueries": [],

	// Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
	//  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
	//  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
	"jupyter.widgetScriptSources": [],

	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"dev.containers.cacheVolume": true,

	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"dev.containers.copyGitConfig": true,

	// Configures the list of extensions to always install while creating a container.
	"dev.containers.defaultExtensions": [],

	// Configures the list of features to always install while creating a container.
	"dev.containers.defaultFeatures": {},

	// Docker Compose executable name or path.
	"dev.containers.dockerComposePath": "docker-compose",

	// Docker (or Podman) executable name or path.
	"dev.containers.dockerPath": "docker",

	// Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
	"dev.containers.executeInWSL": false,

	// WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `dev.containers.executeInWSL` is not enabled or on other platforms than Windows.
	"dev.containers.executeInWSLDistro": "",

	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"dev.containers.gitCredentialHelperConfigLocation": "global",

	// The log level for the extension.
	"dev.containers.logLevel": "debug",

	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
	"dev.containers.repositoryConfigurationPaths": [],

	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"dev.containers.workspaceMountConsistency": "cached",

	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",

	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",

	// Use `dev.containers.cacheVolume` instead.
	// 
	"remote.containers.cacheVolume": null,

	// Use `dev.containers.copyGitConfig` instead.
	// 
	"remote.containers.copyGitConfig": null,

	// Use `dev.containers.defaultExtensions` instead.
	// 
	"remote.containers.defaultExtensions": null,

	// Use `dev.containers.dockerComposePath` instead.
	// 
	"remote.containers.dockerComposePath": null,

	// Use `dev.containers.dockerPath` instead.
	// 
	"remote.containers.dockerPath": null,

	// Use `dotfiles.installCommand` instead.
	// 
	"remote.containers.dotfiles.installCommand": null,

	// Use `dotfiles.repository` instead.
	// 
	"remote.containers.dotfiles.repository": null,

	// Use `dotfiles.targetPath` instead.
	// Deprecated setting. Use 'dotfiles.targetPath' instead.
	"remote.containers.dotfiles.targetPath": null,

	// Use `dev.containers.executeInWSL` instead.
	// 
	"remote.containers.executeInWSL": null,

	// Use `dev.containers.executeInWSLDistro` instead.
	// 
	"remote.containers.executeInWSLDistro": null,

	// Use `dev.containers.gitCredentialHelperConfigLocation` instead.
	// 
	"remote.containers.gitCredentialHelperConfigLocation": null,

	// Use `dev.containers.logLevel` instead.
	// 
	"remote.containers.logLevel": null,

	// Use `dev.containers.repositoryConfigurationPaths` instead.
	// Deprecated setting. Use 'dev.containers.repositoryConfigurationPaths' instead.
	"remote.containers.repositoryConfigurationPaths": null,

	// Use `dev.containers.workspaceMountConsistency` instead.
	// 
	"remote.containers.workspaceMountConsistency": null,

	// Deprecated, please use `remote.SSH.localServerDownload`
	// If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.
	"remote.SSH.allowLocalServerDownload": true,

	// The absolute file path to a custom SSH config file.
	"remote.SSH.configFile": "",

	// Specifies the timeout in seconds used for the SSH command that connects to the remote.
	"remote.SSH.connectTimeout": 15,

	// List of extensions that should be installed automatically on all SSH hosts.
	"remote.SSH.defaultExtensions": [],

	// A list of ports to forward when the connection is established.
	"remote.SSH.defaultForwardedPorts": [],

	// Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableAgentForwarding": true,

	// Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.
	"remote.SSH.enableDynamicForwarding": true,

	// **Experimental:** Enable using RemoteCommands from ssh config entries. This is only enabled if `remote.SSH.useLocalServer#` is enabled as well and the remote you are trying to connect to is not listed under the `#remote.SSH.remotePlatform` setting.
	"remote.SSH.enableRemoteCommand": false,

	// Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableX11Forwarding": true,

	// **Experimental:** In local server mode (enabled with `remote.SSH.useLocalServer`) Remote - SSH uses SSH_ASKPASS to set VS Code as the application to handle authentication requests; this makes prompts for input show up inside VS Code. However, if you have an external application to handle authentication, such as an YubiKey, you may want to set SSH_ASKPASS to your application instead. If you enable this setting then Remote - SSH won't override your existing SSH_ASKPASS value if one exists.
	"remote.SSH.externalSSH_ASKPASS": false,

	// Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.
	//  - auto: The server will first be downloaded on the host, and if that fails, will fall back to downloading locally
	//  - always: The server will only be downloaded locally and transferred to the host
	//  - off: The server will only be downloaded on the host
	"remote.SSH.localServerDownload": "auto",

	// Whether to keep lockfiles in `/tmp` instead of in the server's install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.
	"remote.SSH.lockfilesInTmp": false,

	// The log level for the extension.
	"remote.SSH.logLevel": "debug",

	// The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.
	"remote.SSH.maxReconnectionAttempts": null,

	// An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations.
	"remote.SSH.path": "",

	// A map of the remote hostname to the platform for that remote. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when `remote.SSH.useLocalServer` is disabled, so it is currently being autopopulated for successful connections, but is not currently used.
	"remote.SSH.remotePlatform": {},

	// When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command "Kill VS Code Server on Host..." for it to take effect. Requires OpenSSH 6.7+. Disables the "local server" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.
	"remote.SSH.remoteServerListenOnSocket": false,

	// A map of remote host to absolute path where the VS Code server will be installed. By default the server is installed in the home directory of every remote. **Note**: By changing this setting you may need to clean up other installations of `.vscode-server` on your remote that isn't in the path you've configured.
	"remote.SSH.serverInstallPath": {},

	// A map of the remote hostname to a range of ports you'd prefer the server to connect to on launch on the remote machine. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it's expected the first number will be lower than the next.
	"remote.SSH.serverPickPortsFromRange": {},

	// Always reveal the SSH login terminal.
	"remote.SSH.showLoginTerminal": false,

	// Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can't be found. This setting disables that warning.
	"remote.SSH.suppressWindowsSshWarning": false,

	// Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.
	"remote.SSH.useFlock": true,

	// Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.
	"remote.SSH.useLocalServer": true,

	// Deprecated: Please use `remote.SSH.remotePlatorm` instead
	// **Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.
	"remote.SSH.windowsRemotes": [],

	// Specifies the order in which to display folders under Remote targets in the Remote Explorer.
	//  - most recently used: Display folders in order of the most recently opened at the top
	//  - alphabetical: Display folders in alphabetical order
	"remote-explorer.foldersSortOrder": "most recently used",

	// Always show rule failures as warnings, independent of the tslint configuration.
	"tslint.alwaysShowRuleFailuresAsWarnings": true,

	// The path to the rules configuration file
	"tslint.configFile": "",

	// A glob or an array of globs. Any file matching these globs will not be linted.
	"tslint.exclude": null,

	// Control if TypeScript definition files should be ignored.
	"tslint.ignoreDefinitionFiles": false,

	// Control whether tslint is enabled for JavaScript files or not.
	"tslint.jsEnable": false,

	// The package manager you use to install node modules.
	"tslint.packageManager": "npm",

	// Always show rule failures as warnings, independent of the tslint configuration.
	"tslint.suppressWhileTypeErrorsPresent": false,

	// Enables various accessibility features, such as audio cues about what is happening in the session.
	"liveshare.accessibility.accessibilityFeaturesEnabled": "auto",

	// Output device to play audio in accessibility mode.
	"liveshare.accessibility.outputDevice": "Default",

	// Enables sound effects about activity.
	"liveshare.accessibility.soundsEnabled": true,

	// Controls the volume of sound audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.soundVolume": 100,

	// Controls the rate of speech in accessibility mode.
	"liveshare.accessibility.speechRate": 2,

	// The voice used for speech in accessibility mode.
	"liveshare.accessibility.voice": "en-US-Jenny",

	// Enables spoken announcements about activity.
	"liveshare.accessibility.voiceEnabled": true,

	// Controls the volume of voice audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.voiceVolume": 100,

	// Allow guests to start and stop debugging sessions.
	"liveshare.allowGuestDebugControl": false,

	// Allow guests to run and terminate workspace tasks.
	"liveshare.allowGuestTaskControl": false,

	// Specifies who to allow session invitations from.
	"liveshare.allowInvites": "contacts",

	// Ensures that the session's host is always followed.
	"liveshare.alwaysFollowHost": false,

	// Controls how to handle join requests from anonymous guests.
	"liveshare.anonymousGuestApproval": "prompt",

	// Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
	"liveshare.autoShareServers": true,

	// Controls whether terminals are automatically shared with guests (read-only).
	"liveshare.autoShareTerminals": true,

	// Controls whether to show the CodeLens for starting a collaboration session.
	"liveshare.codeLens": true,

	// Controls whether to allow comments in collaboration sessions
	"liveshare.comments": true,

	// Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
	"liveshare.connectionMode": "auto",

	// Enables the Visual Studio Live Share output channel.
	"liveshare.diagnosticLogging": false,

	// Specifies the level of logging output from Visual Studio Live Share Extension
	"liveshare.diagnosticLoggingLevel": "Warning",

	// Enables diagnostic notifications and logs.
	"liveshare.diagnosticMode": false,

	// Controls set of active features. By selecting `insiders`, you agree to the [Pre-Release Software License Terms](https://aka.ms/vsls-license-preview) and [Privacy Statement](https://aka.ms/vsls-privacy).
	"liveshare.featureSet": "stable",

	// Specifies how to respond to focus requests from other participants.
	"liveshare.focusBehavior": "accept",

	// Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
	"liveshare.guestApprovalRequired": false,

	// Increases the guest limit from 5 to 30.
	"liveshare.increasedGuestLimit": true,

	// Controls how the participant will join incoming shared debug sessions.
	"liveshare.joinDebugSessionOption": "Automatic",

	// Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
	"liveshare.keepAliveInterval": 20,

	// Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
	"liveshare.languages.allowGuestCommandControl": false,

	// Specifies the client to launch when clicking on a Live Share URL.
	"liveshare.launcherClient": "web",

	// Controls when to display a participant's name tag instead of just their cursor.
	"liveshare.nameTagVisibility": "Activity",

	// Allow guests to run notebook cells
	"liveshare.notebooks.allowGuestExecuteCells": false,

	// Controls whether to automatically open shared servers in your default browser.
	"liveshare.openSharedServers": true,

	// Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
	"liveshare.populateGitCoAuthors": "always",

	// Controls whether to publish your presence to other users, and allow in-tool invites for collaboration sessions
	"liveshare.presence": false,

	// Controls whether to publish your current workspace folder to other users
	"liveshare.publishWorkspaceInfo": false,

	// Height of shared terminal window, characters.
	"liveshare.sharedTerminalHeight": 50,

	// Width of shared terminal window, characters.
	"liveshare.sharedTerminalWidth": 120,

	// Automatically share external files opened by the host during a collaboration session.
	"liveshare.shareExternalFiles": true,

	// Show or hide the Live Share status bar items.
	"liveshare.showInStatusBar": "always",

	// Controls visibility of the cursor and highlights for read-only users.
	"liveshare.showReadOnlyUsersInEditor": "whileFollowing",

	// Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
	"liveshare.showVerboseNotifications": true,

	// Controls how to respond when an audio call is started.
	"liveshare.audio.joinCallBehavior": "prompt",

	// Controls whether to automatically start an audio call whenever you share.
	"liveshare.audio.startCallOnShare": false,

	// Whether to show the Debug button in the Editor Title area menu
	"react-native-tools.displayDebuggingCommandsButton": true,

	// Logging level in extension
	"react-native-tools.logLevel": "Info",

	// The color theme for Network inspector logs in VS Code DevTools console
	"react-native-tools.networkInspector.consoleLogsColorTheme": "Light",

	// Subfolder in which the React Native project is located
	"react-native-tools.projectRoot": "",

	// The command name to be used to execute React Native CLI commands.
	"react-native-tools.reactNativeGlobalCommandName": "",

	// Whether to show tips about extension features
	"react-native-tools.showUserTips": true,

	// Environment variables passed to the program.
	"react-native.android.env.device": {},

	// Environment variables passed to the program.
	"react-native.android.env.simulator": {},

	// Absolute path to a file containing environment variable definitions.
	"react-native.android.envFile.device": "",

	// Absolute path to a file containing environment variable definitions.
	"react-native.android.envFile.simulator": "",

	// Arguments to be used for LogCat (The LogCat output will appear on an Output Channel). It can be an array such as: [":S", "ReactNative:V", "ReactNativeJS:V"]
	"react-native.android.logCatArguments": [
		"*:S",
		"ReactNative:V",
		"ReactNativeJS:V"
	],

	// Run arguments to be passed to 'react-native run-android' command
	"react-native.android.runArguments.device": [],

	// Run arguments to be passed to 'react-native run-android' command
	"react-native.android.runArguments.simulator": [],

	// Specific packages used to prepare the extension for debugging Expo applications
	"react-native.expo.dependencies": {
		"xdl": "59.2.31",
		"@expo/metro-config": "0.3.13",
		"@expo/ngrok": "^4.1.0"
	},

	// Environment variables passed to the program.
	"react-native.ios.env.device": {},

	// Environment variables passed to the program.
	"react-native.ios.env.simulator": {},

	// Absolute path to a file containing environment variable definitions.
	"react-native.ios.envFile.device": "",

	// Absolute path to a file containing environment variable definitions.
	"react-native.ios.envFile.simulator": "",

	// Run arguments to be passed to 'react-native run-ios' command
	"react-native.ios.runArguments.device": [],

	// Run arguments to be passed to 'react-native run-ios' command
	"react-native.ios.runArguments.simulator": [],

	// React Native packager port
	"react-native.packager.port": 8081,

	// React Native Packager status representation in the VS Code status bar
	"react-native.packager.status-indicator": "Full",

	// Name(s) of the connection(s) to auto connect on start.
	"sqltools.autoConnectTo": [],

	// Auto open session file when connecting.
	"sqltools.autoOpenSessionFiles": true,

	// Languages that SQLTools will add CodeLenses to.
	// 
	// You can use any language identifier, including those listed at https://code.visualstudio.com/docs/languages/identifiers.
	// 
	// More info about codelens, see https://vscode-sqltools.mteixeira.dev/features/codelens
	"sqltools.codelensLanguages": [
		"sql"
	],

	// Languages with SQL completion enabled.
	// 
	// You can use any language identifier, including those listed at https://code.visualstudio.com/docs/languages/identifiers.
	"sqltools.completionLanguages": [
		"sql"
	],

	// Display connections in two groups, 'Connected' and 'Not Connected'.
	"sqltools.connectionExplorer.groupConnected": false,

	// Connections list.
	"sqltools.connections": [],

	// Default mode for results Export command.
	"sqltools.defaultExportType": "prompt",

	// Default mode for results Open command.
	"sqltools.defaultOpenType": "prompt",

	// Dependency Manager settings.
	"sqltools.dependencyManager": {
		"packageManager": "npm",
		"installArgs": [
			"install"
		],
		"runScriptArgs": [
			"run"
		],
		"autoAccept": false
	},

	// SQLTools' default chord keybindings begin with `Ctrl/Cmd+E` and therefore mask the default keybinding of VS Code's `Go to File...` command. When this setting is disabled (the default) you can instead invoke that command with the chord `Ctrl/Cmd+E Ctrl/Cmd+E`. Enable this setting if you don't require SQLTools' chord keybindings.
	"sqltools.disableChordKeybindings": false,

	// Disable new release notifications.
	"sqltools.disableReleaseNotifications": false,

	// Flatten groups that have only one child.
	"sqltools.flattenGroupsIfOne": false,

	// 
	"sqltools.format": {},

	// Languages with SQL formatting enabled.
	// 
	// You can use any language identifier, including those listed at https://code.visualstudio.com/docs/languages/identifiers.
	"sqltools.formatLanguages": [
		"sql"
	],

	// Highlight the query at the cursor position.
	"sqltools.highlightQuery": true,

	// Number of queries to keep in History.
	"sqltools.historySize": 100,

	// Set environment variables to be passed to language server. For example `ORACLE_HOME`, `PATH`...
	"sqltools.languageServerEnv": {},

	// Enables query parameter checking.
	"sqltools.queryParams.enableReplace": false,

	// RegEx used to identify query parameters.
	"sqltools.queryParams.regex": "\\$[\\d]+|\\$\\[[\\d\\w]+\\]",

	// Properties that customize the appearance of results tables.
	"sqltools.results.customization": {},

	// Maximum number of records to return in results.
	"sqltools.results.limit": 50,

	// Define which edit group the results tab should appear in. Empty groups are never created. For example, if setting is 4 but only one group currently exists then the first set of results will create a new group 2, the second a group 3 and the third and subsequent sets of results will appear in group 4.
	//  - next: New group if nothing open. Second group if currently active text editor is in first group. Otherwise third group.
	//  - current: Current active group.
	//  - end: The third group.
	//  - 1: First group.
	//  - 2: Second group.
	//  - 3: Third group.
	//  - 4: Fourth group.
	//  - 5: Fifth group.
	//  - 6: Sixth group.
	//  - 7: Seventh group.
	//  - 8: Eighth group.
	//  - 9: Ninth group.
	"sqltools.results.location": "next",

	// How requests reuse results tabs.
	//  - never: Every request creates a new tab.
	//  - connection: There is a single tab for each connection.
	"sqltools.results.reuseTabs": "never",

	// Folder for session files to be saved in.
	"sqltools.sessionFilesFolder": "",

	// Toggle statusbar visibility.
	"sqltools.showStatusbar": true,

	// Sort columns criteria.
	"sqltools.sortColumns": "name",

	// Table columns should be expanded on load?
	"sqltools.tableTreeItemsExpanded": false,

	// Enable node runtime usage.
	"sqltools.useNodeRuntime": false,

	// Array of file extensions to search in order.
	"javascript.commonjs.resolve.extensions": [
		".js"
	],

	// Array of languages where the script should be enabled.
	"javascript.commonjs.resolve.languages": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact"
	],

	// Directories in which to recursively look for modules.
	"javascript.commonjs.resolve.moduleDirectory": [
		"node_modules"
	],

	// package.json Data applicable to the module being loaded
	"javascript.commonjs.resolve.package": "package.json",

	// CLI args to pass to test runner. Example : --watch
	"javascript-test-runner.additionalArgs": "",

	// Path to custom docstring template (overrides docstringFormat). Path can be absolute or relative to the project root.
	"autoDocstring.customTemplatePath": "",

	// Which docstring format to use.
	"autoDocstring.docstringFormat": "google",

	// Generate docstring on pressing enter after opening a docstring (use quoteStyle)
	"autoDocstring.generateDocstringOnEnter": true,

	// Guess the type of parameters and return values
	"autoDocstring.guessTypes": true,

	// Include [extended_summary] tag
	"autoDocstring.includeExtendedSummary": false,

	// Include function names at the start of docstrings
	"autoDocstring.includeName": false,

	// Output log information
	"autoDocstring.logLevel": "Info",

	// Style of quote used with generate docstring command
	"autoDocstring.quoteStyle": "\"\"\"",

	// Start docstring on new line
	"autoDocstring.startOnNewLine": false,

	// Control when jest should run (changed) tests. It supports multiple models, such as fully automated, fully manual and onSave... See [AutoRun](https://github.com/jest-community/vscode-jest/blob/master/README.md#how-to-trigger-the-test-run) for details and examples
	"jest.autoRun": null,

	// Coverage indicator color override. See [Coverage Colors](https://github.com/jest-community/vscode-jest/blob/master/README.md#coverageColors) for details and examples
	"jest.coverageColors": null,

	// Coverage formatter to use
	"jest.coverageFormatter": "DefaultFormatter",

	// Enable debug mode to diagnose plugin issues. (see developer console)
	"jest.debugMode": false,

	// Disabled workspace folders names in multiroot environment
	"jest.disabledWorkspaceFolders": [],

	// The command line to start jest tests. It should be the same command line users run jest tests from a terminal/shell, with ability to append extra arguments (by the extension at runtime)
	"jest.jestCommandLine": "",

	// Enable monitoring for long running test process. See valid [monitorLongRun](https://github.com/jest-community/vscode-jest/blob/master/README.md#monitorLongRun) for details
	"jest.monitorLongRun": 60000,

	// The env passed to runner process in addtion to `process.env`
	"jest.nodeEnv": null,

	// The path to your frontend src folder
	"jest.rootPath": "",

	// The shell path or a login-shell to override jest runner process default shell (see Node [child_process.spawn()](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options)) for more detail)
	"jest.shell": null,

	// Show code coverage when extension starts (if collected)
	"jest.showCoverageOnLoad": false,

	// Configure jest TestExplorer. See valid [formats](https://github.com/jest-community/vscode-jest/blob/master/README.md#testexplorer) or [how to use test explorer](https://github.com/jest-community/vscode-jest/blob/master/README.md#how-to-use-the-test-explorer) for more details
	"jest.testExplorer": null,

	// The ref you would like the pipeline to run on.
	"gitlabPipelineActions.createPipeline.ref": "master",

	// The variables you would like to run on the pipeline.
	"gitlabPipelineActions.createPipeline.variables": null,

	// The ID or URL-encoded path of the project
	"gitlabPipelineActions.id": "",

	// GitLab Personal Access Token
	"gitlabPipelineActions.token": "",

	// 
	"gitlabPipelineActions.url": "https://gitlab.com",

	// Specifies how long (in minutes) version suggestions will be cached. Setting the duration to 0 will disable caching.
	"versionlens.caching.duration": 3,

	// Defines the api to use for composer package searching.
	"versionlens.composer.apiUrl": "https://repo.packagist.org/p",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.composer.caching.duration": null,

	// Defines which properties in composer.json should be parsed by this extension
	"versionlens.composer.dependencyProperties": [
		"require",
		"require-dev"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.composer.http.strictSSL": null,

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.dotnet.caching.duration": null,

	// Defines which project properties should be parsed by this extension
	"versionlens.dotnet.dependencyProperties": [
		"PackageReference",
		"PackageVersion",
		"DotNetCliToolReference"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.dotnet.http.strictSSL": null,

	// Defines which nuget source to use for package searching. Has to be a v3 'service index' endpoint. e.g. https://api.nuget.org/v3/index.json. Defaults to the sources output by `dotnet nuget list source`
	"versionlens.dotnet.nuget.sources": [],

	// Define which common tagged versions you want to see. i.e. [alpha, beta]. If you don't specify any dist tags then all the dist-tags for a package will be shown.
	"versionlens.dotnet.tagFilter": [],

	// Defines the api to use for dub package searching.
	"versionlens.dub.apiUrl": "https://code.dlang.org/api/packages",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.dub.caching.duration": null,

	// Defines which properties in dub.json should be parsed by this extension
	"versionlens.dub.dependencyProperties": [
		"dependencies",
		"versions"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.dub.http.strictSSL": null,

	// Used for making basic read only github api requests. To generate a token see https://help.github.com/articles/creating-an-access-token-for-command-line-use/#creating-a-token. When no token is provided then access to the github api is rate limited to 60 requests every 10 minutes or so.
	"versionlens.github.accessToken": "",

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned.
	"versionlens.http.strictSSL": true,

	// Sets the level of logs to be written to the VersionLens output channel.
	"versionlens.logging.level": "error",

	// Defines the api to use for maven package searching.
	"versionlens.maven.apiUrl": "",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.maven.caching.duration": null,

	// Defines which properties in pom.xml should be parsed by this extension
	"versionlens.maven.dependencyProperties": [
		"dependency",
		"parent"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.maven.http.strictSSL": null,

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.npm.caching.duration": null,

	// Defines which properties in package.json should be parsed by this extension
	"versionlens.npm.dependencyProperties": [
		"dependencies",
		"devDependencies",
		"peerDependencies",
		"optionalDependencies"
	],

	// Define which common dist tags you want to see. i.e. [alpha, beta]. If you don't specify any dist tags then all the dist-tags for a package will be shown.
	"versionlens.npm.distTagFilter": [],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.npm.http.strictSSL": null,

	// Defines the pub api to use for package searching.
	"versionlens.pub.apiUrl": "https://pub.dev",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.pub.caching.duration": null,

	// Defines which properties in pubspec.yaml should be parsed by this extension
	"versionlens.pub.dependencyProperties": [
		"dependencies",
		"dev_dependencies"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.pub.http.strictSSL": null,

	// Show version suggestions by default on vscode start up.
	"versionlens.suggestions.showOnStartup": false,

	// Show version prerelease suggestions by default on vscode start up.
	"versionlens.suggestions.showPrereleasesOnStartup": false,

	// List of @babel/parser plugins to use, see: https://babeljs.io/docs/en/babel-parser#plugins
	"vscodeReactRefactor.babelPlugins": "objectRestSpread, classProperties, typescript, jsx",

	// Display parser error messages
	"vscodeReactRefactor.enableDebug": false,

	// The created React Functional Component will be
	"vscodeReactRefactor.functionType": "function",

	// gitlab域名，必填
	"gitMRNotice.gitlabUrl": null,

	// gitlab版本，默认v4，选填，填入例如v3
	"gitMRNotice.gitlabVersion": "v4",

	// gitlab中个人账号的私有授权，必填
	"gitMRNotice.privateToken": null,

	// 设置检查时间,单位（秒）
	"gitMRNotice.timeout": 60,

	// File extensions separated by space that are taken in consideration by Live Update
	"livePreview.liveUpdateFilesExtension": "html",

	// Path relative to src folder of your maine js bundle
	"livePreview.mainBundleJsPath": ".\\..\\live-preview\\main.bundle.js",

	// Live Preview is active
	"livePreview.on": true,

	// Quality Clouds API Key
	"UserConfiguration.API-key": "",

	// Show written off issues
	"UserConfiguration.displayWriteOff": true,

	// The stock quote color style [↑, ↓, -]
	"vscode-stocks.colorStyle": [
		"red",
		"green",
		"white"
	],

	// IEXCloud API Keys - Please obtain at least one for free at iexcloud.io - 500,000 req/month rate limit
	"vscode-stocks.iexCloudAPIKeys": [],

	// The stock quote refresh interval (ms)
	"vscode-stocks.refreshInterval": 60000,

	// If true, shows the change indicator arrows.
	"vscode-stocks.showChangeIndicator": false,

	// The list of stock symbols to display in the status bar. Prefix Yahoo Finance symbols with `YF:`. Ex: `YF:GC=F`.
	"vscode-stocks.stockSymbols": [],

	// If true, highlights items red when they're down and green when they're up
	"vscode-stocks.useColors": false,

	// 3scale user_key to access dependencyAnalytics.host
	"dependencyAnalytics.apiKey": "207c527cfc2a6b8dcf4fa43ad7a976da",

	// Host name of Dependency Analytics server.
	"dependencyAnalytics.host": "https://gw.api.openshift.io/",

	// Host name of the stack report UI.
	"dependencyAnalytics.stackReportUIHost": "https://stack-analytics-report.openshift.io/",

	// Controls the maximum number of problems produced by the server.
	"dependencyAnalyticsServer.maxNumberOfProblems": 100,

	// Traces the communication between VSCode and the dependencyAnalyticsServer service.
	"dependencyAnalyticsServer.trace.server": "off",

	// Specifies absolute path of go executable.
	"go.executable.path": "",

	// Specifies absolute path of mvn executable.
	"maven.executable.path": "",

	// Specifies absolute path of npm executable.
	"npm.executable.path": "",

	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": null,

	// Enable/disable completion feature
	"yaml.completion": true,

	// Custom tags for the parser to use
	"yaml.customTags": [],

	// Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml.
	"yaml.disableAdditionalProperties": false,

	// Disable adding not required properties with default values into completion text.
	"yaml.disableDefaultProperties": false,

	// Print spaces between brackets in objects
	"yaml.format.bracketSpacing": true,

	// Enable/disable default YAML formatter
	"yaml.format.enable": true,

	// Specify the line length that the printer will wrap on
	"yaml.format.printWidth": 80,

	// Always: wrap prose if it exceeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
	"yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes
	"yaml.format.singleQuote": false,

	// Enable/disable hover feature
	"yaml.hover": true,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"yaml.maxItemsComputed": 5000,

	// Associate schemas to YAML files in the current workspace
	"yaml.schemas": {},

	// Automatically pull available YAML schemas from JSON Schema Store
	"yaml.schemaStore.enable": true,

	// URL of schema store catalog to use
	"yaml.schemaStore.url": "https://www.schemastore.org/api/json/catalog.json",

	// Forbid flow style mappings
	"yaml.style.flowMapping": "allow",

	// Forbid flow style sequences
	"yaml.style.flowSequence": "allow",

	// If true, the user must select some parent skeleton first before autocompletion starts to suggest the rest of the properties. When yaml object is not empty, autocompletion ignores this setting and returns all properties and skeletons
	"yaml.suggest.parentSkeletonSelectedFirst": false,

	// Traces the communication between VSCode and the YAML language service.
	"yaml.trace.server": "off",

	// Enable/disable validation feature
	"yaml.validate": true,

	// Default YAML spec version
	"yaml.yamlVersion": "1.2",

	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": null,

	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": false,

	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": null,

	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,

	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,

	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",

	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
	"liveServer.settings.fullReload": false,

	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",

	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},

	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],

	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],

	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,

	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,

	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,

	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},

	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",

	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,

	// Use local IP as host
	"liveServer.settings.useLocalIp": false,

	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,

	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,

	// Automatically compile SASS/SCSS file after saving
	"easysass.compileAfterSave": true,

	// Regular expression for filenames (excluding path) excluded from building. Leave empty to disable.
	"easysass.excludeRegex": "",

	// Define format(s) for outputted css files. Use "nested", "expanded", "compact" or "compressed" as a format.
	"easysass.formats": [
		{
			"format": "expanded",
			"extension": ".css"
		},
		{
			"format": "compressed",
			"extension": ".min.css"
		}
	],

	// Target directory for generated files. If relative, will be based on currently opened folder in VS Code.
	"easysass.targetDir": "",

	// Controls whether JavaScript Standard Style is enabled globally for JavaScript files or not.
	"standard.enableGlobally": false,

	// Any linting error reported by Standard will instead be displayed as a warning within VS Code.
	"standard.treatErrorsAsWarnings": false,

	// Maximum number of characters before and after your current position is sent to TabNine. Restart required.
	"tabnine.charLimit": 100000,

	// Enables debug mode. Restart required.
	"tabnine.debug": false,

	// List of languages IDs to disable. Restart required.
	"tabnine.disabledLanguagesIds": [],

	// Enables TabNine completions. Restart required.
	"tabnine.enable": true,

	// Maximum number of results returned by TabNine. Restart required.
	"tabnine.maxNumberOfResults": 5,

	// Timeout in milliseconds after which TabNine request is terminated. Restart required.
	"tabnine.requestTimeout": 50,

	// items in this array will be at the top of the completion list (only for items that show after the & sign)
	"sass.andStared": [
		"active",
		"focus",
		"hover",
		"nth-child"
	],

	// Stop the extension from automatically indenting when pressing Enter
	"sass.disableAutoIndent": false,

	// adds units to the intellisense completions if false.
	"sass.disableUnitCompletion": true,

	// Convert scss/css to sass.
	"sass.format.convert": true,

	// enables debug mode.
	"sass.format.debug": false,

	// removes empty rows.
	"sass.format.deleteEmptyRows": true,

	// removes trailing whitespace.
	"sass.format.deleteWhitespace": true,

	// enables the sass formatter.
	"sass.format.enabled": true,

	// If true space between the property: value, is always set to 1.
	"sass.format.setPropertySpace": true,

	// Disable Tabnine when the file path contains a match of any of the provided regexes. For example, add "[.]js$" to disable Tabnine in JavaScript files.
	"tabnine.disableFileRegex": [],

	// Disable Tabnine when the current line contains a match of any of the provided regexes. For example, add "require" to disable Tabnine when the current line contains the word 'require'.
	"tabnine.disableLineRegex": [],

	// Experimental: Enable modules auto-import following applying Tabnine suggestions
	"tabnine.experimentalAutoImports": null,

	// Tabnine's log file (Visual Studio Code must be restarted for this setting to take effect)
	"tabnine.logFilePath": "",

	// Tabnine's log level (Visual Studio Code must be restarted for this setting to take effect)
	"tabnine.logLevel": "",

	// Receive Tabnine VSCode extention beta updates
	"tabnine.receiveBetaChannelUpdates": false,

	// Set default browser
	"open-in-browser.default": "",

	// The linter to use
	"python.linter": "pyLint",

	// Controls the maximum number of problems produced by the server.
	"python.maxNumberOfProblems": 100,

	// Logging level for console
	"intellicodeApiExamples.loggingLevel": "INFO",

	// Enable API Usage Examples for Python files
	"intellicodeApiExamples.python.enabled": true,

	// Enable API Usage Examples for Typescript/Javascript files
	"intellicodeApiExamples.typescript.enabled": true,

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
	"vsintellicode.modelDownloadPath": null,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Allow to run tasks in parallel, each running will create a new terminal. This configuration will override `gradle.reuseTerminals` and always create new task terminals when running or debugging a task.
	"gradle.allowParallelRun": false,

	// Controls whether Gradle tasks should be automatically detected
	"gradle.autoDetect": "on",

	// Show extra debug information in the output panel
	"gradle.debug": false,

	// Disable the warning confirm messages when performing batch actions
	"gradle.disableConfirmations": false,

	// Focus the task in the explorer when running a task
	"gradle.focusTaskInExplorer": true,

	// This setting will be removed in the future since the extension can automatically get debug tasks, for clean options, please see `gradle.javaDebug.cleanOutput`.
	// Java debug options
	"gradle.javaDebug": {
		"tasks": [
			"run",
			"runBoot",
			"test",
			"intTest",
			"integration"
		]
	},

	// Clean the task output cache before debugging
	"gradle.javaDebug.cleanOutput": true,

	// Discover Gradle projects in nested sub-directories
	"gradle.nestedProjects": false,

	// Default method of opening newly created project.
	"gradle.projectOpenBehaviour": "Interactive",

	// Reuse task terminals behaviour, will be overridden to `off` if `gradle.allowParallelRun` is true.
	//  - task: Use a dedicated terminal for a specific task. The terminal is not shared with other tasks.
	//  - off: Create a new terminal when a task is executed.
	//  - all: Share the terminal with other tasks.
	"gradle.reuseTerminals": "task",

	// Show stopped daemons in the Gradle Daemons view
	"gradle.showStoppedDaemons": false,

	// Automatically start on file open if Quokka was last running when the file was closed
	"quokka.automaticRestart": false,

	// Automatically start on file open when the file path matches the regular expression
	"quokka.automaticStartRegex": "",

	// Code auto-play delay in milliseconds
	"quokka.codeAutoPlayDelay": 1000,

	// Suppress auto upload Code Clip notification
	"quokka.codeClipAutoUpload": false,

	// Colorize Quokka output
	"quokka.colorizeOutput": true,

	// Quokka gutter indicators colors (requires a restart after change)
	"quokka.colors": {
		"covered": "#62b455",
		"errorPath": "#ffa0a0",
		"errorSource": "#fe536a",
		"notCovered": "#cccccc",
		"partiallyCovered": "#d2a032"
	},

	// Minimize the number of new line characters between output console messages
	"quokka.compactMessageOutput": false,

	// Override Quokka Dark Theme Error
	"quokka.darkTheme.error.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#fe536a",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Dark Theme Log
	"quokka.darkTheme.log.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgba(86, 156, 214, 1)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Dark Theme System Log
	"quokka.darkTheme.system.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgb(153, 153, 153)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme Error
	"quokka.lightTheme.error.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#c80000",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme Log
	"quokka.lightTheme.log.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#0000ff",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme System Log
	"quokka.lightTheme.system.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgb(153, 153, 153)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Display code lens in Quokka output
	"quokka.showCodeLensInOutputChannel": true,

	// Show Quokka output window on start up
	"quokka.showOutputOnStart": true,

	// Display information about new features when they are released
	"quokka.showStartViewOnFeatureRelease": true,

	// Show expression value on multiline selection
	"quokka.showValueOnMultilineSelection": false,

	// Display Quokka Start View status bar indicator
	"quokka.startViewStatusBar": true,

	// Stop Quokka expiring license update reminders
	"quokka.suppressExpirationNotifications": false,

	// Suppress Quokka Glyph Margin Notifications
	"quokka.suppressGlyphMarginNotifications": true,

	// Synchronize Quokka license details and other settings as a part of VS Code Settings Sync
	"quokka.syncSettings": true,

	// Specifies whether Quokka is allowed to run in an [untrusted workspace](https://code.visualstudio.com/docs/editor/workspace-trust).
	//  - Prompt to allow: Prompt for confirmation before starting Quokka in an untrusted workspace.
	//  - Never allow: Never start Quokka in an untrusted workspace.
	//  - Always allow: Always start Quokka (without prompts) in an untrusted workspace.
	"quokka.untrustedWorkspaceBehavior": "Prompt to allow",

	// Which bundle size to use for selecting the color
	"importCost.bundleSizeColoring": "minified",

	// Which bundle size to display
	"importCost.bundleSizeDecoration": "both",

	// Enable debug logging
	"importCost.debug": false,

	// Decoration font style
	"importCost.fontStyle": "normal",

	// File extensions to be parsed by the Javascript parser
	"importCost.javascriptExtensions": [
		"\\.jsx?$"
	],

	// Decoration color for large packages in dark theme
	"importCost.largePackageDarkColor": "#d44e40",

	// Decoration color for large packages in light theme
	"importCost.largePackageLightColor": "#d44e40",

	// Decoration margin from end of line
	"importCost.margin": 1,

	// Decoration color for medium packages in dark theme
	"importCost.mediumPackageDarkColor": "#7cc36e",

	// Decoration color for medium packages in light theme
	"importCost.mediumPackageLightColor": "#7cc36e",

	// Upper size limit, in KB, that will count a package as a medium package
	"importCost.mediumPackageSize": 100,

	// Display the 'calculating' decoration when starting to calculate the size
	"importCost.showCalculatingDecoration": true,

	// Decoration color for small packages in dark theme
	"importCost.smallPackageDarkColor": "#7cc36e",

	// Decoration color for small packages in light theme
	"importCost.smallPackageLightColor": "#7cc36e",

	// Upper size limit, in KB, that will count a package as a small package
	"importCost.smallPackageSize": 50,

	// File extensions to be parsed by the Svelte parser
	"importCost.svelteExtensions": [
		"\\.svelte$"
	],

	// Size calculation timeout in milliseconds
	"importCost.timeout": 20000,

	// File extensions to be parsed by the Typescript parser
	"importCost.typescriptExtensions": [
		"\\.tsx?$"
	],

	// File extensions to be parsed by the Vue parser
	"importCost.vueExtensions": [
		"\\.vue$"
	],

	// The path to a PHP executable.
	"php.debug.executablePath": null,

	// A unique key that allows the proxy to match requests to your editor. Only used when proxy configuration includes replacement.
	"php.debug.ideKey": "vsc",

	// 配置基金分组名称（建议通过界面新增）
	"host-auto.fundGroups": [
		"我的基金"
	],

	// A list of CSS based languages where suggestions are enabled.
	"html-css-class-completion.CSSLanguages": [
		"css",
		"sass",
		"scss"
	],

	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "",

	// A list of HTML based languages where suggestions are enabled.
	"html-css-class-completion.HTMLLanguages": [
		"html",
		"vue",
		"razor",
		"blade",
		"handlebars",
		"twig",
		"django-html",
		"php",
		"markdown",
		"erb",
		"ejs",
		"svelte"
	],

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

	// A list of JavaScript based languages where suggestions are enabled.
	"html-css-class-completion.JavaScriptLanguages": [
		"javascript",
		"javascriptreact",
		"typescriptreact"
	],

}